"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _templateObject = _taggedTemplateLiteral(["\n    display : flex;\n    flex-direction : column;\n    position : relative;\n    width : 100%;\n"], ["\n    display : flex;\n    flex-direction : column;\n    position : relative;\n    width : 100%;\n"]),
    _templateObject2 = _taggedTemplateLiteral(["\n    color : inherit; // deriving color from parent <Information />\n    display : flex;\n    flex-direction : column;\n    font-size : 14px;\n    font-weight : 600;\n    line-height : 14px;\n    user-select : none;\n    width : 100%;\n"], ["\n    color : inherit; // deriving color from parent <Information />\n    display : flex;\n    flex-direction : column;\n    font-size : 14px;\n    font-weight : 600;\n    line-height : 14px;\n    user-select : none;\n    width : 100%;\n"]),
    _templateObject3 = _taggedTemplateLiteral(["\n  display : flex;\n  justify-content : space-between;\n"], ["\n  display : flex;\n  justify-content : space-between;\n"]),
    _templateObject4 = _taggedTemplateLiteral(["\n  color : ", ";\n  font-weight : normal;\n  line-height : 16px;\n  margin-bottom : 8px;\n  margin-top: 8px; \n  display: ", "; \n  \n"], ["\n  color : ", ";\n  font-weight : normal;\n  line-height : 16px;\n  margin-bottom : 8px;\n  margin-top: 8px; \n  display: ", "; \n  \n"]),
    _templateObject5 = _taggedTemplateLiteral(["\n    align-items : center;\n    display : flex;\n    justify-content : center;\n    margin-left : auto;\n    position : relative; // tool tip is gonna be relative to THIS container. K\n    //width : 100%;\n"], ["\n    align-items : center;\n    display : flex;\n    justify-content : center;\n    margin-left : auto;\n    position : relative; // tool tip is gonna be relative to THIS container. K\n    //width : 100%;\n"]),
    _templateObject6 = _taggedTemplateLiteral(["\n    // styling necessary for positioning to <RelativeInfoIconContainer />\n    position: absolute;\n    left : ", ";\n    top : ", ";\n    z-index : 20;\n"], ["\n    // styling necessary for positioning to <RelativeInfoIconContainer />\n    position: absolute;\n    left : ", ";\n    top : ", ";\n    z-index : 20;\n"]),
    _templateObject7 = _taggedTemplateLiteral(["\n    background-color : ", ";\n    border-radius : 4px;\n    color : ", ";\n    font-size : 14px;\n    height : 18px;\n    line-height : 16px;\n    min-width : 150px;\n    position : absolute;\n    padding : 8px;\n    /* styling necessary for positioning to <ToolTipContainer /> */\n    left : ", ";\n"], ["\n    background-color : ", ";\n    border-radius : 4px;\n    color : ", ";\n    font-size : 14px;\n    height : 18px;\n    line-height : 16px;\n    min-width : 150px;\n    position : absolute;\n    padding : 8px;\n    /* styling necessary for positioning to <ToolTipContainer /> */\n    left : ", ";\n"]),
    _templateObject8 = _taggedTemplateLiteral(["\n    /* styling necessary to get triangle shape */\n    width: 0; \n    height: 0; \n    border-top : 10px solid transparent;\n    border-bottom : 10px solid transparent; \n    border-right : 10px solid ", ";\n\n    /* styling necessary for positioning to <ToolTipContainer /> */\n    position : absolute;\n    left : -5px;\n    top : 5px;\n"], ["\n    /* styling necessary to get triangle shape */\n    width: 0; \n    height: 0; \n    border-top : 10px solid transparent;\n    border-bottom : 10px solid transparent; \n    border-right : 10px solid ", ";\n\n    /* styling necessary for positioning to <ToolTipContainer /> */\n    position : absolute;\n    left : -5px;\n    top : 5px;\n"]),
    _templateObject9 = _taggedTemplateLiteral(["\n    /* styling necessary to get triangle shape */\n    width: 0; \n    height: 0; \n    border-left: 10px solid transparent;\n    border-right: 10px solid transparent;\n    border-top: 10px solid ", ";\n    cursor : pointer;\n\n    /* styling necessary for positioning to <ToolTipContainer /> */\n    position : absolute;\n    left : 12px;\n    top: 28px;\n"], ["\n    /* styling necessary to get triangle shape */\n    width: 0; \n    height: 0; \n    border-left: 10px solid transparent;\n    border-right: 10px solid transparent;\n    border-top: 10px solid ", ";\n    cursor : pointer;\n\n    /* styling necessary for positioning to <ToolTipContainer /> */\n    position : absolute;\n    left : 12px;\n    top: 28px;\n"]),
    _templateObject10 = _taggedTemplateLiteral(["\n    align-items : center;\n    background-color : ", ";\n    border-radius : 4px;\n    border-top-right-radius : ", ";\n    border-bottom-right-radius : ", ";\n    border-color : ", ";\n    \n    border-right-color : transparent;\n    border-style : solid;\n    border-width : 1px;\n    display : flex;\n    align-items: center;\n    display : flex;\n    flex-direction : row;\n    justify-content : center;\n    padding : 7px; /* Removed {flex : 1} property and adjusted this style adjusted so that height is 40px per LPAD-270. - KCN */\n    position : relative;\n\n\n    ", ":hover {\n      border-width : 2px;\n    };\n\n    ", ":focus {\n      border-width : 2px;\n    };\n\n\n"], ["\n    align-items : center;\n    background-color : ", ";\n    border-radius : 4px;\n    border-top-right-radius : ", ";\n    border-bottom-right-radius : ", ";\n    border-color : ", ";\n    \n    border-right-color : transparent;\n    border-style : solid;\n    border-width : 1px;\n    display : flex;\n    align-items: center;\n    display : flex;\n    flex-direction : row;\n    justify-content : center;\n    padding : 7px; /* Removed {flex : 1} property and adjusted this style adjusted so that height is 40px per LPAD-270. - KCN */\n    position : relative;\n\n\n    ", ":hover {\n      border-width : 2px;\n    };\n\n    ", ":focus {\n      border-width : 2px;\n    };\n\n\n"]),
    _templateObject11 = _taggedTemplateLiteral(["\n    align-items: center;\n    display : flex;\n    flex-direction : row;\n    position : relative;\n    margin-top: ", "\n"], ["\n    align-items: center;\n    display : flex;\n    flex-direction : row;\n    position : relative;\n    margin-top: ", "\n"]),
    _templateObject12 = _taggedTemplateLiteral(["\n    background-color : ", ";\n    border-radius : 4px;\n    border-top-left-radius : ", ";\n    border-bottom-left-radius : ", ";\n    border-color : ", ";\n    border-style : solid;\n    border-width : 1px;\n    box-sizing: border-box;\n    font-size: 14px;\n    height: 40px;\n    outline : none;\n    padding-left: 12px;\n    width : 100%;\n    &::placeholder {\n        color : ", "\n    };\n\n    &:hover {\n      background-color : ", ";\n      border-color : ", ";\n\n      border-width : 2px;\n    };\n\n    &:focus {\n        border-color : ", ";\n        border-width : 2px;\n    };\n\n    /* input does not have an acitve psuedo class (only <a> and <button> ) */\n    &:active {\n        //box-shadow : 0px;\n    };\n    &:disabled {\n        border-color : ", ";\n        cursor : not-allowed;\n    };\n"], ["\n    background-color : ", ";\n    border-radius : 4px;\n    border-top-left-radius : ", ";\n    border-bottom-left-radius : ", ";\n    border-color : ", ";\n    border-style : solid;\n    border-width : 1px;\n    box-sizing: border-box;\n    font-size: 14px;\n    height: 40px;\n    outline : none;\n    padding-left: 12px;\n    width : 100%;\n    &::placeholder {\n        color : ", "\n    };\n\n    &:hover {\n      background-color : ", ";\n      border-color : ", ";\n\n      border-width : 2px;\n    };\n\n    &:focus {\n        border-color : ", ";\n        border-width : 2px;\n    };\n\n    /* input does not have an acitve psuedo class (only <a> and <button> ) */\n    &:active {\n        //box-shadow : 0px;\n    };\n    &:disabled {\n        border-color : ", ";\n        cursor : not-allowed;\n    };\n"]),
    _templateObject13 = _taggedTemplateLiteral(["\n    /* styling necessary for positioning to <RelativeInputPreviewContainer /> */\n    background-color : ", ";\n    border-radius : 4px;\n    display : ", "; /* NOTE preventing from tabbing over PreviewIcon unless it is a password input-type - KCN */\n    height : 32px;\n    margin-right : 4px;\n    outline : none;\n    position : absolute;\n    right : 0px;\n    top : 4px;\n    width : 32px;\n    z-index : 2;\n\n    \n    &:hover {\n      background-color : ", "\n    };\n\n    :focus {\n      /* box shadow exists on all s2s form elements is necessary to indicate active state and override default browser settings. Color value is a colorGrid value in rgba format with .6 opacity */\n      -webkit-box-shadow: 0px 0px 0px 2px rgba(34,138,230,0.6);\n      -moz-box-shadow: 0px 0px 0px 2px rgba(34,138,230,0.6);\n      box-shadow: 0px 0px 0px 2px rgba(34,138,230,0.6);\n    };\n    \n    :active {\n      -webkit-box-shadow: none;\n      -moz-box-shadow: none;\n      box-shadow : none;\n    };\n"], ["\n    /* styling necessary for positioning to <RelativeInputPreviewContainer /> */\n    background-color : ", ";\n    border-radius : 4px;\n    display : ", "; /* NOTE preventing from tabbing over PreviewIcon unless it is a password input-type - KCN */\n    height : 32px;\n    margin-right : 4px;\n    outline : none;\n    position : absolute;\n    right : 0px;\n    top : 4px;\n    width : 32px;\n    z-index : 2;\n\n    \n    &:hover {\n      background-color : ", "\n    };\n\n    :focus {\n      /* box shadow exists on all s2s form elements is necessary to indicate active state and override default browser settings. Color value is a colorGrid value in rgba format with .6 opacity */\n      -webkit-box-shadow: 0px 0px 0px 2px rgba(34,138,230,0.6);\n      -moz-box-shadow: 0px 0px 0px 2px rgba(34,138,230,0.6);\n      box-shadow: 0px 0px 0px 2px rgba(34,138,230,0.6);\n    };\n    \n    :active {\n      -webkit-box-shadow: none;\n      -moz-box-shadow: none;\n      box-shadow : none;\n    };\n"]),
    _templateObject14 = _taggedTemplateLiteral(["\n    align-items: center;\n    background-color : ", ";\n    border-radius : 4px;\n    box-shadow: 0px 4px 8px rgba(33, 37, 41, 0.4);\n    color : ", ";\n    display : flex;\n    font-size : 14px;\n    line-height : 16px;\n    padding : 8px 12px;\n    z-index : 3;\n\n    /* styling necessary for positioning to <Container /> */\n    position : absolute;\n    top : ", "; \n    width : ", ";\n      \n      \n"], ["\n    align-items: center;\n    background-color : ", ";\n    border-radius : 4px;\n    box-shadow: 0px 4px 8px rgba(33, 37, 41, 0.4);\n    color : ", ";\n    display : flex;\n    font-size : 14px;\n    line-height : 16px;\n    padding : 8px 12px;\n    z-index : 3;\n\n    /* styling necessary for positioning to <Container /> */\n    position : absolute;\n    top : ", "; \n    width : ", ";\n      \n      \n"]),
    _templateObject15 = _taggedTemplateLiteral(["\n  bottom : 42px;\n  left : -42px;\n  display : none;\n  font-weight : normal;\n \n  /* NOTE:  the '&' here is styled-component syntax that causes hovering over the AbsolutePreviewIconContainer to affect style of tooltip.  Reference\n    advance section of styled-components documentation under 'Referring to other components' */\n  ", ":hover & {\n    display : flex;\n    white-space : nowrap;\n  };\n"], ["\n  bottom : 42px;\n  left : -42px;\n  display : none;\n  font-weight : normal;\n \n  /* NOTE:  the '&' here is styled-component syntax that causes hovering over the AbsolutePreviewIconContainer to affect style of tooltip.  Reference\n    advance section of styled-components documentation under 'Referring to other components' */\n  ", ":hover & {\n    display : flex;\n    white-space : nowrap;\n  };\n"]);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _s2sBaseClass = require("s2s-base-class");

var _s2sBaseClass2 = _interopRequireDefault(_s2sBaseClass);

var _objectMerge = require("object-merge");

var _objectMerge2 = _interopRequireDefault(_objectMerge);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _s2sThemes = require("s2s-themes");

var _immutable = require("immutable");

var _s2sSvgIcons = require("s2s-svg-icons");

var svgIcons = _interopRequireWildcard(_s2sSvgIcons);

var _styledComponents = require("styled-components");

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _s2sTooltip = require("s2s-tooltip");

var _s2sTooltip2 = _interopRequireDefault(_s2sTooltip);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var icons = _extends({}, svgIcons);

// Parent container of everything in <Input />
var Container = _styledComponents2.default.div(_templateObject);

var Label = _styledComponents2.default.label(_templateObject2);

// Parent of {this.props.inputLabel} and <RelativeInfoIconContainer />
var Information = _styledComponents2.default.div(_templateObject3);

var Hint = _styledComponents2.default.div(_templateObject4, _s2sThemes.colorGrid.gray5, function (props) {

  return !props.hasHint ? 'none' : 'inherit';
});

// Div containing InfoIconSVG - Exists to trigger mousover events and positioning tooltip based on <InfoIconSVG />.
var RelativeInfoIconContainer = _styledComponents2.default.div(_templateObject5);

// Parent div containing <ToolTip />, <LeftArrow />, and <BottomArrow />. Exists to position toolTip
// Tweaking positioning so that it is not rendering directly over <InfoIconSVG /> and handling toolTipLocation positioning.
var ToolTipContainer = _styledComponents2.default.div(_templateObject6, function (props) {
  return props.toolTipLocation === "top" ? "-15px" : "20px";
}, function (props) {
  return props.toolTipLocation === "top" ? "-50px" : "-10px";
});

// Actual tip area containing text
var InfoToolTip = _styledComponents2.default.span(_templateObject7, _s2sThemes.colorGrid.gray9, _s2sThemes.colorGrid.gray0, function (props) {
  return props.toolTipLocation === 'top' ? '-20px' : '0px';
});

// An empty div that renders the triangle to the left of <ToolTip />
var LeftArrow = _styledComponents2.default.div(_templateObject8, _s2sThemes.colorGrid.gray9);

// An empty div that renders the triangle underneath <ToolTip />
var BottomArrow = _styledComponents2.default.div(_templateObject9, _s2sThemes.colorGrid.gray9);

//  Div containing SVG to the left of input
var InputTypeSVGArea = _styledComponents2.default.div(_templateObject10, function (props) {
  var backgroundColor = _s2sThemes.colorGrid.gray1;

  if (props.hasHover === true) {
    backgroundColor = _s2sThemes.colorGrid.gray3;
  }

  if (props.hasError === true && props.hasFocus == false) {
    backgroundColor = _s2sThemes.colorGrid.red6;
  }

  // We want SVG to change when INPUT has focus so cannot use pseudo classes here. - KCN 
  if (props.hasFocus === true) {
    backgroundColor = _s2sThemes.colorGrid.blue6;
  }

  return backgroundColor;
}, function (props) {
  return props.hasSVG === true ? '0px' : '4px';
}, function (props) {
  return props.hasSVG === true ? '0px' : '4px';
}, function (props) {
  var borderColor = _s2sThemes.colorGrid.gray3;

  if (props.hasError === true && props.hasFocus == false) {
    borderColor = _s2sThemes.colorGrid.red6;
  }

  // We want SVG to change when INPUT has focus so cannot use pseudo classes here. - KCN 
  if (props.hasFocus === true) {
    borderColor = _s2sThemes.colorGrid.blue6;
  }

  return borderColor;
}, StyledInput, StyledInput);

// This container exists so that PreviewIconSVG positioning does not change depending on if {inputLabel} is provided or not. 
var RelativeInputPreviewContainer = _styledComponents2.default.div(_templateObject11, function (props) {
  var topMargin = '0px';

  if (props.hasLabel && !props.hasHint) {
    topMargin = '8px';
  }

  return topMargin;
});

var StyledInput = _styledComponents2.default.input(_templateObject12, _s2sThemes.colorGrid.gray0, function (props) {
  return props.hasSVG === true ? '0px' : '4px';
}, function (props) {
  return props.hasSVG === true ? '0px' : '4px';
}, function (props) {
  var borderColor = _s2sThemes.colorGrid.gray3;

  if (props.hasError === true && props.hasFocus == false) {
    borderColor = _s2sThemes.colorGrid.red6;
  }

  return borderColor;
}, _s2sThemes.colorGrid.gray5, _s2sThemes.colorGrid.gray2, function (props) {
  var borderColor = _s2sThemes.colorGrid.gray5;

  if (props.hasError === true && props.hasFocus == false) {
    borderColor = _s2sThemes.colorGrid.red6;
  }

  return borderColor;
}, _s2sThemes.colorGrid.blue6, _s2sThemes.colorGrid.gray2);

var AbsolutePreviewIconContainer = _styledComponents2.default.div(_templateObject13, function (props) {
  return props.passwordShowing === true ? _s2sThemes.colorGrid.red1 : _s2sThemes.colorGrid.gray2;
}, function (props) {
  return props.inputType === 'password' ? 'block' : 'none';
}, function (props) {
  return props.passwordShowing === true ? _s2sThemes.colorGrid.red3 : _s2sThemes.colorGrid.gray4;
});

// Parent div of <ErrorSVGArea /> and <ErrorText />
var ErrorContainer = _styledComponents2.default.div(_templateObject14, _s2sThemes.colorGrid.red7, _s2sThemes.colorGrid.gray0, function (props) {

  var topPosition = '55px'; // has neither hint or a label

  if (props.hasLabel && !props.hasHint) {
    topPosition = '61px';
  }

  if (props.hasHint && !props.hasLabel) {
    topPosition = '69px';
  }

  if (props.hasLabel && props.hasHint) {
    topPosition = '86px';
  }
  return topPosition;
}, function (props) {
  var width = "calc(100% - 22px );"; /* must account for padding left/right of <ErrorContainer />  and border of <StyledInput /> or it is not the full width */

  if (props.errorContainerWidth !== undefined) {
    width = props.errorContainerWidth;
  }
  return width;
});

var PreviewPasswordToolTip = (0, _styledComponents2.default)(_s2sTooltip2.default)(_templateObject15, AbsolutePreviewIconContainer);

var Input = function (_S2SBaseComponent) {
  _inherits(Input, _S2SBaseComponent);

  function Input(props) {
    _classCallCheck(this, Input);

    var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

    _this.displayName = "Input";

    _this.state = {
      isFocus: false,
      isHover: false,
      passwordShowing: false, // shows or hides text in a password input field
      toolTipDisplayed: false,
      previewPasswordHover: false
    };

    _this.inputRef = _react2.default.createRef();

    _this.handleTogglePreview = _this.handleTogglePreview.bind(_this);
    _this.handleToolTipHoverIn = _this.handleToolTipHoverIn.bind(_this);
    _this.handleToolTipHoverOut = _this.handleToolTipHoverOut.bind(_this);
    _this.handleInputHoverIn = _this.handleInputHoverIn.bind(_this);
    _this.handleInputHoverOut = _this.handleInputHoverOut.bind(_this);
    _this.handleTogglePreviewKeyDown = _this.handleTogglePreviewKeyDown.bind(_this);
    _this.handlePreviewPasswordHover = _this.handlePreviewPasswordHover.bind(_this);
    _this.handleFocus = _this.handleFocus.bind(_this);
    _this.handleBlur = _this.handleBlur.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    _this.handleKeyUp = _this.handleKeyUp.bind(_this);

    return _this;
  }

  _createClass(Input, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !(0, _immutable.fromJS)(nextProps).equals((0, _immutable.fromJS)(this.props)) || !(0, _immutable.fromJS)(nextState).equals((0, _immutable.fromJS)(this.state));
    }

    // Renders a ToolTip popover

  }, {
    key: "renderToolTip",
    value: function renderToolTip() {
      var DynamicArrow = BottomArrow;
      if (this.props.toolTipLocation === 'right') {
        DynamicArrow = LeftArrow;
      }

      if (this.state.toolTipDisplayed === true) {
        return _react2.default.createElement(
          ToolTipContainer,
          { className: "ToolTipContainer", toolTipLocation: this.props.toolTipLocation },
          _react2.default.createElement(
            InfoToolTip,
            { className: "ToolTip", toolTipLocation: this.props.toolTipLocation },
            this.props.toolTipText
          ),
          _react2.default.createElement(DynamicArrow, { className: "DynamicArrow" })
        );
      }
    }

    // Render area containing 'info' icon and tooltip

  }, {
    key: "renderToolTipArea",
    value: function renderToolTipArea() {
      if (this.props.displayToolTip === true) {
        return _react2.default.createElement(
          RelativeInfoIconContainer,
          {
            className: "RelativeInfoIconContainer",
            onMouseOver: this.handleToolTipHoverIn,
            onMouseOut: this.handleToolTipHoverOut
          },
          _react2.default.createElement(_s2sSvgIcons.InfoIconSVG, {
            className: "InfoIconSVG",
            onMouseOver: this.handleToolTipHoverIn,
            onMouseOut: this.handleToolTipHoverOut,
            svgStyle: {
              fill: this.state.toolTipDisplayed === true ? _s2sThemes.colorGrid.blue6 : 'currentColor', // if tooltip is active will display blue. Otherwise derives it inherits fill color from <Information /> color property.
              height: '12px',
              width: '12px'
            }
          }),
          this.renderToolTip()
        );
      }
    }
  }, {
    key: "renderSVGArea",
    value: function renderSVGArea() {
      var displaySvg = void 0;

      if (this.props.svgType !== undefined && icons.hasOwnProperty(this.props.svgType)) {
        var DynamicSVG = icons[this.props.svgType];

        displaySvg = _react2.default.createElement(
          InputTypeSVGArea,
          {
            className: "InputTypeSVGArea",
            hasError: this.props.hasError,
            hasFocus: this.state.isFocus,
            hasHover: this.state.isHover,
            hasSVG: this.props.svgType !== undefined ? true : false,
            onClick: this.props.cbOnIconClick
          },
          _react2.default.createElement(DynamicSVG, {
            className: "DynamicSVG",
            svgStyle: {
              fill: (this.state.isFocus || this.props.hasError) === true ? _s2sThemes.colorGrid.gray0 : _s2sThemes.colorGrid.gray5,
              height: '24px',
              width: '24px'
            }
          })
        );
      }

      return displaySvg;
    }
  }, {
    key: "renderPreviewIcon",
    value: function renderPreviewIcon() {
      var DynamicPreviewIcon = icons['PreviewIconSVG'];
      if (this.state.passwordShowing === true) {
        DynamicPreviewIcon = icons['PreviewHiddenIconSVG'];
      }

      return _react2.default.createElement(DynamicPreviewIcon, {
        className: "PreviewIconSVG",
        svgStyle: {
          alignItems: 'center',
          display: this.props.inputType === 'password' ? 'flex' : 'none',
          cursor: 'pointer',
          fill: this.state.previewPasswordHover === false ? _s2sThemes.colorGrid.gray5 : _s2sThemes.colorGrid.gray7,
          height: '24px',
          justifyContent: 'center',
          padding: '4px',
          width: '24px'
        }
      });
    }
  }, {
    key: "renderRelativeInputArea",
    value: function renderRelativeInputArea() {
      return _react2.default.createElement(
        RelativeInputPreviewContainer,
        {
          className: "RelativeInputPreviewContainer",
          hasLabel: this.props.inputLabel !== undefined,
          hasHint: this.props.inputHint !== undefined },
        this.renderSVGArea(),
        _react2.default.createElement(StyledInput, {
          autoComplete: "off",
          autoFocus: this.props.hasError ? false : this.props.autoFocus // Error is displayed on initial render, and cleared on focus. If we have an error, we do not want autoFocus on because then user will never see error message. - KCN 
          , className: "StyledInput",
          "aria-label": this.props.ariaLabel,
          id: this.props.inputLabel,
          disabled: this.props.isDisabled,
          hasError: this.props.hasError,
          hasFocus: this.state.isFocus,
          hasSVG: this.props.svgType !== undefined ? true : false,
          onChange: this.handleChange,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onKeyPress: this.handleKeyUp,
          onMouseEnter: this.handleInputHoverIn,
          onMouseLeave: this.handleInputHoverOut,
          type: this.state.passwordShowing === true ? 'text' : this.props.inputType,
          placeholder: this.props.placeholder,
          ref: this.inputRef,
          tabIndex: 0,
          value: this.props.value
        }),
        _react2.default.createElement(
          AbsolutePreviewIconContainer,
          {
            className: "AbsolutePreviewIconContainer",
            onClick: this.handleTogglePreview,
            onMouseOver: this.handlePreviewPasswordHover,
            onMouseOut: this.handlePreviewPasswordHover,
            onKeyDown: this.handleTogglePreviewKeyDown,
            inputType: this.props.inputType,
            passwordShowing: this.state.passwordShowing,
            inputHasFocus: true,
            tabIndex: 0
          },
          _react2.default.createElement(PreviewPasswordToolTip, { label: this.state.passwordShowing ? "Hide Password" : "Show Password" }),
          this.props.inputType === "password" ? this.renderPreviewIcon() : undefined
        )
      );
    }

    // Renders Label and it's children including input

  }, {
    key: "getInputContainer",
    value: function getInputContainer() {
      return _react2.default.createElement(
        Label,
        {
          className: "InputContainer",
          disabled: this.props.disabled,
          htmlFor: this.props.inputLabel // ACCESSIBILITY YAS. Click this label...will focus cursor in input. - KCN
        },
        _react2.default.createElement(
          Information,
          { className: "Information" },
          this.props.inputLabel,
          this.renderToolTipArea()
        ),
        _react2.default.createElement(
          Hint,
          {
            hasHint: this.props.inputHint !== undefined },
          this.props.inputHint
        ),
        this.renderRelativeInputArea()
      );
    }

    // Render the error area

  }, {
    key: "renderErrorArea",
    value: function renderErrorArea() {

      if (this.props.hasError === true && this.props.errorText !== undefined && this.state.isFocus === false) {
        return _react2.default.createElement(
          ErrorContainer,
          {
            className: "ErrorContainer",
            errorContainerWidth: this.props.errorContainerWidth,
            hasLabel: this.props.inputLabel !== undefined,
            hasHint: this.props.inputHint !== undefined
          },
          _react2.default.createElement(
            "div",
            { className: "InputErrorSVGContainer" },
            _react2.default.createElement(_s2sSvgIcons.AlertIconSVG, {
              className: "AlertIconSVG",
              svgStyle: {
                fill: _s2sThemes.colorGrid.gray0,
                height: '24px',
                width: '24px',
                paddingRight: '12px'
              }
            })
          ),
          _react2.default.createElement(
            "span",
            { className: "ErrorText" },
            this.props.errorText
          )
        );
      }
    }
  }, {
    key: "handlePreviewPasswordHover",
    value: function handlePreviewPasswordHover() /*e*/{
      var _this2 = this;

      this.setState(function (prevState) {
        return (0, _objectMerge2.default)({}, prevState, { 'previewPasswordHover': !_this2.state.previewPasswordHover });
      });
    }
  }, {
    key: "handleTogglePreview",
    value: function handleTogglePreview(e) {
      var _this3 = this;

      e.preventDefault();
      this.setState(function (prevState) {
        return (0, _objectMerge2.default)({}, prevState, { 'passwordShowing': !_this3.state.passwordShowing });
      });
    }
  }, {
    key: "handleToolTipHoverIn",
    value: function handleToolTipHoverIn() {
      this.setState(function (prevState) {
        return (0, _objectMerge2.default)(prevState, { toolTipDisplayed: true });
      });
    }
  }, {
    key: "handleToolTipHoverOut",
    value: function handleToolTipHoverOut() {
      this.setState(function (prevState) {
        return (0, _objectMerge2.default)({}, prevState, { toolTipDisplayed: false });
      });
    }
  }, {
    key: "handleInputHoverIn",
    value: function handleInputHoverIn() {
      this.setState(function (prevState) {
        return (0, _objectMerge2.default)({}, prevState, { isHover: true });
      });
    }
  }, {
    key: "handleInputHoverOut",
    value: function handleInputHoverOut() {
      this.setState(function (prevState) {
        return (0, _objectMerge2.default)({}, prevState, { isHover: false });
      });
    }
  }, {
    key: "handleFocus",
    value: function handleFocus() {
      if (!this.props.isDisabled) {
        this.setState(function (prevState) {
          return (0, _objectMerge2.default)({}, prevState, {
            'isFocus': true
          });
        });
        this.props.cbOnFocus();
      }
    }
  }, {
    key: "handleBlur",
    value: function handleBlur() {
      if (!this.props.isDisabled) {
        this.setState(function (prevState) {
          return (0, _objectMerge2.default)({}, prevState, { 'isFocus': false });
        });
        this.props.cbOnBlur(this.props.value);
      }
    }
  }, {
    key: "handleChange",
    value: function handleChange(e) {

      //console.log('HANDLE CHANGE', e.target.value);

      var targetValue = void 0;
      // wrap in try catch so it will continue
      try {
        targetValue = decodeURI(encodeURI(e.target.value));
      } catch (e) {
        targetValue = e.target.value;
      }

      if (this.props.cbOnChange) {
        //console.log(e.target.value, e.nativeevent, e);
        this.props.cbOnChange(targetValue);
      }
    }
  }, {
    key: "handleKeyUp",
    value: function handleKeyUp(e) {
      if (e.charCode == 13) {
        this.props.cbOnEnter(this.props.value);
      }
      return true;
    }
  }, {
    key: "handleTogglePreviewKeyDown",
    value: function handleTogglePreviewKeyDown(event) {
      if (event.keyCode === 13) {
        this.handleTogglePreview(event);
      }
    }
  }, {
    key: "render",
    value: function render() {

      return _react2.default.createElement(
        Container,
        {
          className: this.props.className },
        this.getInputContainer(),
        this.renderErrorArea()
      );
    }
  }, {
    key: "value",
    get: function get() {
      if (this.inputRef.current) {
        return this.inputRef.current.props.value; // NOTE : StyledInput is a styled component hence the odd return value. {this.inputRef.value} returns undefined! - KCN 05/02/2018
      } else {
        return undefined;
      }
    }
  }]);

  return Input;
}(_s2sBaseClass2.default);

Input.propTypes = {
  autoFocus: _propTypes2.default.bool,
  cbOnBlur: _propTypes2.default.func,
  cbOnChange: _propTypes2.default.func,
  cbOnEnter: _propTypes2.default.func,
  cbOnFocus: _propTypes2.default.func,
  cbOnIconClick: _propTypes2.default.func,
  errorContainerWidth: _propTypes2.default.string,
  errorText: _propTypes2.default.string,
  hasError: _propTypes2.default.bool,
  inputHint: _propTypes2.default.string,
  inputLabel: _propTypes2.default.string,
  inputType: _propTypes2.default.oneOf(['email', 'password', 'text']),
  isDisabled: _propTypes2.default.bool,
  placeholder: _propTypes2.default.string,
  svgType: _propTypes2.default.string,
  value: _propTypes2.default.string,
  theme: _propTypes2.default.object,
  toolTipLocation: _propTypes2.default.oneOf(['top', 'right'])
};
Input.defaultProps = {
  autoFocus: false,
  cbOnEnter: function cbOnEnter() {/*console.log('cbOnEnter is not defined');*/},
  cbOnBlur: function cbOnBlur() {/*console.log('cbOnBlur is not defined');*/},
  cbOnChange: function cbOnChange() {/*console.log('cbOnChange is not defined');*/},
  cbOnIconClick: function cbOnIconClick() {},
  cbOnFocus: function cbOnFocus() {/*console.log('cbOnFocus is not defined');*/},
  errorContainerWidth: undefined, // this prop was added due to issue in ApplicationVersions where the error message was extremely squished due to tiny input size. - KCN
  errorText: undefined,
  hasError: false,
  inputHint: undefined,
  inputLabel: undefined,
  inputType: 'text',
  isDisabled: false,
  placeholder: undefined,
  svgType: undefined,
  value: '',
  toolTipLocation: 'top'
};
Input.filename = 's2s-input';
Input.displayName = 'Input';
exports.default = Input;
// BY KC Nichols - 06/26/2018
