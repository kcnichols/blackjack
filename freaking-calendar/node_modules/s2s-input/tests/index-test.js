// Input/__tests__/index-js

//'use strict';
import React from 'react';
import { shallow, mount, render } from 'enzyme';
import sinon from 'sinon';
jest.unmock('../src/index.js');
// jest.unmock('../src/styles.js');
jest.unmock('../node_modules/s2s-svg-icons');
jest.unmock('../node_modules/s2s-base-class');
jest.unmock('../node_modules/sinon');
jest.unmock('../node_modules/immutable');
import ReactDOM from 'react-dom';
import Input from '../src/index.js';


const enter = function(input){console.log(input);  console.log(input.length);};

describe('Input Component', ()=>{

  it('rerenders when props have changed', () => {
    const spy = sinon.spy(Input.prototype, "render");

    const wrapper = shallow(<Input  cbOnEnter={enter}  inputType={'password'} />);

    // render is always called once so before setting any props check that it was called once.
    expect(spy.calledOnce).toEqual(true);

    // After setting props check to see if render has been called twice (initial render and render after props have changed)
    wrapper.setProps({alertBodyText: 'change'});
    expect(spy.calledTwice).toEqual(true);

    // Now checking to see if render is called again even though props are the same. Should be false.
    wrapper.setProps({alertBodyText: 'change'});
    expect(spy.calledThrice).toEqual(false);
  });

  it('renders input component container', () => {
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'password'}
      />
    );
    expect(wrapper.find('.inputComponent').length).toEqual(1);
  });

  it('renders input area', () => {
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'email'}
      />
    );
    expect(wrapper.find('.inputContainer').length).toEqual(1);
  });

  it('renders svg area', () => {
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'email'}
      />
    );
    expect(wrapper.find('.svgArea').length).toEqual(1);
  });

  it('renders DynamicSvg', () => {
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'email'}
      />
    );
    expect(wrapper.find('.dynamicSvg').length).toEqual(1);
  });

  it('renders input field', () => {
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'email'}
      />
    );
    expect(wrapper.find('.inputField').length).toEqual(1);
  });

  it('renders show hide control', () => {
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'password'}
      />
    );
    expect(wrapper.find('.showHide').length).toEqual(1);
  });

  it('renders alert area', () => {
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'email'}
      />
    );
    expect(wrapper.find('.inputAlert').length).toEqual(1);
  });

  it('renders alertsvg area', () => {
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'email'}
      />
    );
    expect(wrapper.find('.alertSvgArea').length).toEqual(1);
  });

  it('renders alertSvg', () => {
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'email'}
      />
    );
    expect(wrapper.find('.alertSvg').length).toEqual(1);
  });

  it('renders error text', () => {
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'email'}
      />
    );
    expect(wrapper.find('.errorText').length).toEqual(1);
  });

  it('styles show hide control', () => {
    const wrapper = shallow(
      <Input
        cbOnEnter={enter}
        inputType={'password'}
      />
    );
    expect(wrapper.find('.showHide').props().style.display).toEqual('flex');
  });

  it('styles error when msg exists', () => {
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          hasError
          errorText={'this is error text'}
          inputType={'password'}
      />
    );
    expect(wrapper.find('.inputAlert').props().style.display).toEqual('flex');
  });

  it('renders correct SVG based on inputType(email)', () => {
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'email'}
      />
    );
    expect(wrapper.find('AvatarIconSVG').length).toEqual(1);
  });

  it('renders correct SVG based on inputType(password)', () => {
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'password'}
      />
    );
    expect(wrapper.find('LockIconSVG').length).toEqual(1);
  });

  it('renders correct SVG based on inputType(text)', () => {
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'text'}
      />
    );
    expect(wrapper.find('ChatIconSVG').length).toEqual(1);
  });

  it('tests show hides on click', () => {
    const spy = sinon.spy();
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'password'}
      />
    );
    wrapper.find('.showHide').simulate('click');
    expect(wrapper.find('.showHide').text()).toEqual('Hide');
  });

  it('handleMouseEnter fired', () => {
    const spy = sinon.spy(Input.prototype, 'handleMouseEnter');
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'password'}
      />
    );
    wrapper.find('.inputField').simulate('mouseenter');

    expect(spy.calledOnce).toEqual(true);
    expect(Input.prototype.handleMouseEnter.calledOnce).toEqual(true);
    expect(wrapper.state().onHover).toEqual(true);
  });

  it('onMouseOut fired', () => {
    const spy = sinon.spy(Input.prototype, 'handleMouseLeave');
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'password'}
      />
    );
    wrapper.find('.inputField').simulate('mouseleave');

    expect(spy.calledOnce).toEqual(true);
    expect(Input.prototype.handleMouseLeave.calledOnce).toEqual(true);
    expect(wrapper.state().onHover).toEqual(false);
  });

  it('handleBlur fired', () => {
    const spy = sinon.spy(Input.prototype, 'handleBlur');
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'password'}
      />
    );

    wrapper.find('.inputField').simulate('blur');
    expect(spy.calledOnce).toEqual(true);
    expect(wrapper.state().isFocus).toEqual(false);
  });

  it('handleFocus fired', () => {
    const spy = sinon.spy();
    const wrapper = shallow(
      <Input
          cbOnEnter={enter}
          inputType={'password'}
          cbOnFocus={spy}
      />
    );

    wrapper.find('.inputField').simulate('focus');
    expect(spy.calledOnce).toEqual(true);
    expect(wrapper.state().isFocus).toEqual(true);
  });


});

//tests updated 3/14/17 DN

//3/21/17 coverage 100%
