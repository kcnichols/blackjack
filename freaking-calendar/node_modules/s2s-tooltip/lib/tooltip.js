'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral(['\n  background-color : ', ';\n  border-radius : 18px;\n  color : ', ';\n  font-family: inherit;\n  font-size: 14px;\n  line-height: 16px;\n  padding : 8px 16px;\n  position : absolute;\n  text-align: center;\n  user-select : none;\n'], ['\n  background-color : ', ';\n  border-radius : 18px;\n  color : ', ';\n  font-family: inherit;\n  font-size: 14px;\n  line-height: 16px;\n  padding : 8px 16px;\n  position : absolute;\n  text-align: center;\n  user-select : none;\n']);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _s2sBaseClass = require('s2s-base-class');

var _s2sBaseClass2 = _interopRequireDefault(_s2sBaseClass);

var _s2sThemes = require('s2s-themes');

var _styledComponents = require('styled-components');

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _reactIntl = require('react-intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

// Styles the Container
var ToolTipContainer = _styledComponents2.default.span(_templateObject, _s2sThemes.colorGrid.gray9, _s2sThemes.colorGrid.gray0);

var ToolTip = function (_S2SBaseComponent) {
  _inherits(ToolTip, _S2SBaseComponent);

  function ToolTip(props) {
    _classCallCheck(this, ToolTip);

    var _this = _possibleConstructorReturn(this, (ToolTip.__proto__ || Object.getPrototypeOf(ToolTip)).call(this, props));

    _this.displayName = 'ToolTip';

    _this.state = {};
    return _this;
  }

  _createClass(ToolTip, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !(0, _immutable.fromJS)(nextProps).equals((0, _immutable.fromJS)(this.props)) || !(0, _immutable.fromJS)(nextState).equals((0, _immutable.fromJS)(this.state));
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        ToolTipContainer,
        { className: 'ToolTipContainer ' + this.props.className },
        this.props.label
      );
    }
  }]);

  return ToolTip;
}(_s2sBaseClass2.default);

ToolTip.propTypes = {
  label: _propTypes2.default.string
};
ToolTip.defaultProps = {
  label: "Default Label"
};
ToolTip.filename = 'ToolTip';
ToolTip.displayName = 'ToolTip';
exports.default = ToolTip;
