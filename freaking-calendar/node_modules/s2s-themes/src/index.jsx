import React from 'react';
import invariant from 'invariant';
import colorGrid from './color-grids';
import PropTypes from 'prop-types';

export default class Theme extends React.Component {
  getChildContext() {
    return { appliedStyle : this.appliedStyle };
  }

  constructor(props, context) {
    super(props, context);
    this.appliedStyle = props.appliedStyle;
    this.displayName = 'Theme';
  }

  render() {
    return React.Children.only(this.props.children);
  }
}

Theme.propTypes = {
  appliedStyle: PropTypes.object.isRequired,
  children: PropTypes.element.isRequired
};

Theme.childContextTypes = {
  appliedStyle: PropTypes.object.isRequired
};

export var ApplyTheme = (WrappedComponent, options = {}) => {
  const {
      withRef = true //default to true
  } = options;

  class ThemeFromContext extends React.Component {
    constructor(props, context) {
      super(props, context);
      // invariant(context['appliedStyle'],
      //     '[Themes] Could not find required `appliedStyle` object. ' +
      //     '<Themes> needs to exist in the component ancestry.'
      // );
    }

    getWrappedInstance() {
            invariant(withRef,
            '[Themes] To access the wrapped instance, ' +
            'the `{withRef: true}` option must be set when calling: ' +
            '`ApplyTheme()`'
        );
        return this.refs.wrappedInstance;
    }


    render() {
      //console.log("Gobble Gobble", withRef);
      return (<WrappedComponent {...this.props}
          themeStyle={this.context.appliedStyle}
          ref={withRef ? 'wrappedInstance' : null} />);
    }
  }
  ThemeFromContext.WrappedComponent = WrappedComponent;
  ThemeFromContext.contextTypes = {
    appliedStyle: PropTypes.object
  };
  ThemeFromContext.displayName = 'ApplyTheme('+ (WrappedComponent.displayName || WrappedComponent.name || 'Component')+')';
  return ThemeFromContext;
};

export { colorGrid };
