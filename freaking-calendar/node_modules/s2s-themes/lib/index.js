'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.colorGrid = exports.ApplyTheme = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _colorGrids = require('./color-grids');

var _colorGrids2 = _interopRequireDefault(_colorGrids);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Theme = function (_React$Component) {
  _inherits(Theme, _React$Component);

  _createClass(Theme, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { appliedStyle: this.appliedStyle };
    }
  }]);

  function Theme(props, context) {
    _classCallCheck(this, Theme);

    var _this = _possibleConstructorReturn(this, (Theme.__proto__ || Object.getPrototypeOf(Theme)).call(this, props, context));

    _this.appliedStyle = props.appliedStyle;
    _this.displayName = 'Theme';
    return _this;
  }

  _createClass(Theme, [{
    key: 'render',
    value: function render() {
      return _react2.default.Children.only(this.props.children);
    }
  }]);

  return Theme;
}(_react2.default.Component);

exports.default = Theme;


Theme.propTypes = {
  appliedStyle: _propTypes2.default.object.isRequired,
  children: _propTypes2.default.element.isRequired
};

Theme.childContextTypes = {
  appliedStyle: _propTypes2.default.object.isRequired
};

var ApplyTheme = exports.ApplyTheme = function ApplyTheme(WrappedComponent) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$withRef = options.withRef,
      withRef = _options$withRef === undefined ? true : _options$withRef;

  var ThemeFromContext = function (_React$Component2) {
    _inherits(ThemeFromContext, _React$Component2);

    function ThemeFromContext(props, context) {
      _classCallCheck(this, ThemeFromContext);

      return _possibleConstructorReturn(this, (ThemeFromContext.__proto__ || Object.getPrototypeOf(ThemeFromContext)).call(this, props, context));
      // invariant(context['appliedStyle'],
      //     '[Themes] Could not find required `appliedStyle` object. ' +
      //     '<Themes> needs to exist in the component ancestry.'
      // );
    }

    _createClass(ThemeFromContext, [{
      key: 'getWrappedInstance',
      value: function getWrappedInstance() {
        (0, _invariant2.default)(withRef, '[Themes] To access the wrapped instance, ' + 'the `{withRef: true}` option must be set when calling: ' + '`ApplyTheme()`');
        return this.refs.wrappedInstance;
      }
    }, {
      key: 'render',
      value: function render() {
        //console.log("Gobble Gobble", withRef);
        return _react2.default.createElement(WrappedComponent, _extends({}, this.props, {
          themeStyle: this.context.appliedStyle,
          ref: withRef ? 'wrappedInstance' : null }));
      }
    }]);

    return ThemeFromContext;
  }(_react2.default.Component);

  ThemeFromContext.WrappedComponent = WrappedComponent;
  ThemeFromContext.contextTypes = {
    appliedStyle: _propTypes2.default.object
  };
  ThemeFromContext.displayName = 'ApplyTheme(' + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + ')';
  return ThemeFromContext;
};

exports.colorGrid = _colorGrids2.default;
