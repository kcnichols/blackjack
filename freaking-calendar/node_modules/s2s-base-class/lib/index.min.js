'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _typeof=typeof Symbol==='function'&&typeof Symbol.iterator==='symbol'?function(obj){return typeof obj}:function(obj){return obj&&typeof Symbol==='function'&&obj.constructor===Symbol&&obj!==Symbol.prototype?'symbol':typeof obj};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if('value'in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();var _react=require('react');var _react2=_interopRequireDefault(_react);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function')}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called')}return call&&(typeof call==='object'||typeof call==='function')?call:self}function _inherits(subClass,superClass){if(typeof superClass!=='function'&&superClass!==null){throw new TypeError('Super expression must either be null or a function, not '+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var objectMerge=require('object-merge');var S2SBaseComponent=function(_React$Component){_inherits(S2SBaseComponent,_React$Component);function S2SBaseComponent(props){_classCallCheck(this,S2SBaseComponent);return _possibleConstructorReturn(this,(S2SBaseComponent.__proto__||Object.getPrototypeOf(S2SBaseComponent)).call(this,props))}_createClass(S2SBaseComponent,[{key:'getClassName',value:function getClassName(){//console.log('*****', this, this.constructor.name );
var dName=void 0;if(typeof this.displayName==='string'){dName=this.displayName}else if(typeof this.displayName==='undefined'&&this.constructor&&typeof this.constructor.name==='string'){//console.log('>>>>>>>', this.constructor.name, this );
dName=this.constructor.name}else{console.warn('class missing displayName',_typeof(this.displayName),this.displayName,this.constructor,this.constructor&&this.constructor.name,this);dName='undefined'}return dName}},{key:'applyThemeStyle',value:function applyThemeStyle(styleName,styles){// NOTE: the 'themes' object is imported (in case you are looking for where
// it is defined)
var componentName=this.getClassName().toLowerCase();if(this.props.themeStyle&&this.props.themeStyle[componentName]&&this.props.themeStyle[componentName][styleName]){return objectMerge(styles,this.props.themeStyle[componentName][styleName])}else{if(this.props.themeStyle&&this.constructor.filename&&this.props.themeStyle[this.constructor.filename]&&this.props.themeStyle[this.constructor.filename][styleName]){return objectMerge(styles,this.props.themeStyle[this.constructor.filename][styleName])}else{if(this.props.themeStyle&&this.constructor.filename&&this.props.themeStyle[this.constructor.filename.toLowerCase()]&&this.props.themeStyle[this.constructor.filename.toLowerCase()][styleName]){return objectMerge(styles,this.props.themeStyle[this.constructor.filename.toLowerCase()][styleName])}else{return styles}}}}},{key:'getCompStyle',value:function getCompStyle(styleName){var props=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.props;return props.compStyle&&props.compStyle[styleName]?props.compStyle[styleName]:props.compStyle}},{key:'getStyle',value:function getStyle(styleName){var props=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.props;var state=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.state;var styleReturn=this.getDefaultStyle(styleName,{state:state,props:props});//add object
//console.log('getStyle default: '+styleName , {...styleReturn});
// apply the themed styling
if(this.props.themeStyle){styleReturn=this.applyThemeStyle(styleName,styleReturn)}//console.log('getStyle themed: '+styleName, {...styleReturn});
// apply style from props
var compStyle=this.getCompStyle(styleName,props);if(compStyle){styleReturn=objectMerge(styleReturn,compStyle);//{ ...styleReturn, ...this.getCompStyle(styleName) };
}//console.log('getStyle returing ... with comp: '+styleName, {...styleReturn});
return styleReturn}},{key:'getIntlText',value:function getIntlText(keyName,defaultMsg){//console.log('Intl: ', this.getClassName(), keyName);
var sMessage=defaultMsg;if(this.props.intl){var intlMsg=this.props.intl.formatMessage({'id':keyName});if(intlMsg!=keyName){sMessage=intlMsg}}return sMessage}}]);return S2SBaseComponent}(_react2.default.Component);// jes cannot do this since we have not defined it on all classes yet
//S2SBaseComponent.filename = 's2s-base-class';
exports.default=S2SBaseComponent;
