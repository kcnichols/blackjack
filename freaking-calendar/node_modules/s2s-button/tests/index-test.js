import React from 'react';
import { shallow, mount } from 'enzyme';
import sinon from 'sinon';
jest.unmock('../src/index.js');
jest.unmock('../node_modules/s2s-svg-icons');
jest.unmock('../node_modules/immutable');

//import Button from '../src/index.jsx';
import Button from '../src/index.js';
describe('Button Component', ()=>{
  const funFunc = () =>{
    console.log('gotta get my plan through congress');
  };

  const overrideStyles = {
    buttonStyles : {
      backgroundColor: 'black'
    },
    labelStyles : {
      backgroundColor: 'white',
      color: 'blue'
    },
    svgStyles : {
      color: 'red'
    },
    hoverButtonStyles : {
      backgroundColor: 'yellow'
    },
    hoverLabelStyles : {
      backgroundColor: 'red',
      color: 'blue'
    },
    hoverSvgStyles : {
      color: 'green'
    },
    focusButtonStyles : {
      backgroundColor: 'purple'
    },
    focusLabelStyles : {
      backgroundColor: 'purple',
      color: 'white'
    },
    focusSvgStyles : {
      color: 'white'
    }
  };

  it('renders buttonLabel', () => {
  const wrapper = shallow(<Button cbClick={funFunc} buttonLabel="Hamilton" />);
    expect(wrapper.find('.label').contains("Hamilton")).toEqual(true);
  });

  it('renders an SVG to the left', () => {
    const wrapper = shallow(<Button cbClick={funFunc} buttonLabel="John Adams spends the summer with his family" svgType="SettingsIconSVG" />);
    expect(wrapper.find(".dsvg").length).toEqual(1);
  });

  it('renders an SVG to the right', () => {
    const wrapper = shallow(<Button cbClick={funFunc} buttonLabel="John Adams spends the summer with his family" svgType="SettingsIconSVG" svgPos="right" />);
    expect(wrapper.childAt(1).hasClass('dsvg')).toEqual(true);
  });

  it('renders an SVG to the top', () => {
    const wrapper = shallow(<Button cbClick={funFunc} buttonLabel="John Adams spends the summer with his family" svgType="SettingsIconSVG" svgPos="top" />);
    expect(wrapper.childAt(0).hasClass('dsvg')).toEqual(true);
    expect(wrapper.props().style.flexDirection).toEqual('column');
  });

  it('renders an SVG on the bottom', () => {
    const wrapper = shallow(<Button cbClick={funFunc} buttonLabel="John Adams spends the summer with his family" svgType="SettingsIconSVG" svgPos="bottom" />);
    expect(wrapper.childAt(1).hasClass('dsvg')).toEqual(true);
    expect(wrapper.props().style.flexDirection).toEqual('column');
  });

  it('simulates an onclick event', () => {
    const spy = sinon.spy();
    const wrapper = shallow(<Button cbClick={spy} buttonLabel="John Adams spends the summer with his family" svgType="SettingsIconSVG" svgPos="bottom" />);
    wrapper.simulate('click');
    expect(spy.calledOnce).toEqual(true);
  });

  it('rerenders when props have changed', () => {
    const spy = sinon.spy(Button.prototype, "render");

    const wrapper = shallow(<Button cbClick={funFunc} buttonLabel="John Adams spends the summer with his family" svgType="SettingsIconSVG" svgPos="bottom" />);

    // render is always called once so before setting any props check that it was called once.
    expect(spy.calledOnce).toEqual(true);

    // After setting props check to see if render has been called twice (initial render and render after props have changed)
    wrapper.setProps({ buttonLabel: "Work"});
    expect(spy.calledTwice).toEqual(true);

    // Now checking to see if render is called again even though props are the same. Should be false.
    wrapper.setProps({ buttonLabel: "Work"});
    expect(spy.calledThrice).toEqual(false);
  });


    it('handleMouseEnter fired', () => {
      const spy = sinon.spy(Button.prototype, 'handleMouseEnter');
      const wrapper = shallow(
        <Button
            buttonLabel="Label"
            cbClick={funFunc}
            compStyle={overrideStyles}
            svgType="SettingsIconSVG"
            svgPos="bottom"
        />
      );
      wrapper.find('.bottomSVG').simulate('mouseenter');

      expect(spy.calledOnce).toEqual(true);
      expect(Button.prototype.handleMouseEnter.calledOnce).toEqual(true);
      expect(wrapper.state().buttonStyles.backgroundColor).toEqual('yellow');
    });

    it('handleMouseLeave fired', () => {
      const spy = sinon.spy(Button.prototype, 'handleMouseLeave');
      const wrapper = shallow(
        <Button
            buttonLabel="Label"
            cbClick={funFunc}
            compStyle={overrideStyles}
            svgType="SettingsIconSVG"
            svgPos="bottom"
        />
      );
      wrapper.find('.bottomSVG').simulate('blur');

      expect(spy.calledOnce).toEqual(true);
      expect(Button.prototype.handleMouseLeave.calledOnce).toEqual(true);
      expect(wrapper.state().buttonStyles.backgroundColor).toEqual('black');
    });

    it('handleFocus fired', () => {
      const spy = sinon.spy(Button.prototype, 'handleFocus');
      const wrapper = shallow(
        <Button
            buttonLabel="Label"
            cbClick={funFunc}
            compStyle={overrideStyles}
            svgType="SettingsIconSVG"
            svgPos="bottom"
        />
      );
      wrapper.find('.bottomSVG').simulate('focus');

      expect(spy.calledOnce).toEqual(true);
      expect(Button.prototype.handleFocus.calledOnce).toEqual(true);
      expect(wrapper.state().buttonStyles.backgroundColor).toEqual('purple');
    });

    it('buttonOnKeyDown fired', () => {
      const spy = sinon.spy(Button.prototype, 'buttonOnKeyDown');
      const wrapper = shallow(
        <Button
            buttonLabel="Label"
            cbClick={funFunc}
            compStyle={overrideStyles}
            svgType="SettingsIconSVG"
            svgPos="bottom"
        />
      );

      //ENTER
      wrapper.find('.bottomSVG').simulate('keydown', {keyCode: 32});
      expect(spy.calledOnce).toEqual(true);
      expect(Button.prototype.buttonOnKeyDown.calledOnce).toEqual(true);

      //SPACEBAR
      wrapper.find('.bottomSVG').simulate('keydown', {keyCode: 13});
      expect(spy.calledTwice).toEqual(true);
      expect(Button.prototype.buttonOnKeyDown.calledTwice).toEqual(true);

    });


});


//test confirmed 3/08/17 DN
//tests updated 3/15/17 DN - 100% coverage
