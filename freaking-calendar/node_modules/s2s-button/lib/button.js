"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
// import ObjectMerge from "object-merge";


var _templateObject = _taggedTemplateLiteral(["\n    align-items: center;\n    background-color : ", ";\n    border-color: transparent;\n    border-radius: ", ";\n    border-width: 1px;\n    cursor: pointer;\n    display: inline-flex; // Using this over flex so that button does not stretch out to fill it's container - KCN\n    flex-direction: ", ";\n    height : ", "; // Corrected height issue not being passed down correctly. Found when using button in Login component - KCN\n    padding-bottom : ", "; // circular buttons come off looking more circular and not like a weird oval - KCN\n    padding-top : ", "; // circular buttons come off looking more circular and not like a weird oval - KCN\n    padding-left : ", "; \n    padding-right : ", "; \n    outline: none;\n    user-select: none;\n\n    /** Styling based on Button States **/\n    &:hover { \n        background-color: ", "; \n    }\n    &:focus { \n        border-color : ", ";\n        /* box shadow exists on all s2s form elements is necessary to indicate active state and override default browser settings. Color value is a colorGrid value in rgba format with .6 opacity */\n        -webkit-box-shadow: 0px 0px 0px 2px rgba(34,138,230,0.6);\n        -moz-box-shadow: 0px 0px 0px 2px rgba(34,138,230,0.6);\n        box-shadow: 0px 0px 0px 2px rgba(34,138,230,0.6);\n    }\n\n    &:disabled {\n        opacity : 0.6;\n        outline: none;\n        cursor : not-allowed;\n    }\n"], ["\n    align-items: center;\n    background-color : ", ";\n    border-color: transparent;\n    border-radius: ", ";\n    border-width: 1px;\n    cursor: pointer;\n    display: inline-flex; // Using this over flex so that button does not stretch out to fill it's container - KCN\n    flex-direction: ", ";\n    height : ", "; // Corrected height issue not being passed down correctly. Found when using button in Login component - KCN\n    padding-bottom : ", "; // circular buttons come off looking more circular and not like a weird oval - KCN\n    padding-top : ", "; // circular buttons come off looking more circular and not like a weird oval - KCN\n    padding-left : ", "; \n    padding-right : ", "; \n    outline: none;\n    user-select: none;\n\n    /** Styling based on Button States **/\n    &:hover { \n        background-color: ", "; \n    }\n    &:focus { \n        border-color : ", ";\n        /* box shadow exists on all s2s form elements is necessary to indicate active state and override default browser settings. Color value is a colorGrid value in rgba format with .6 opacity */\n        -webkit-box-shadow: 0px 0px 0px 2px rgba(34,138,230,0.6);\n        -moz-box-shadow: 0px 0px 0px 2px rgba(34,138,230,0.6);\n        box-shadow: 0px 0px 0px 2px rgba(34,138,230,0.6);\n    }\n\n    &:disabled {\n        opacity : 0.6;\n        outline: none;\n        cursor : not-allowed;\n    }\n"]),
    _templateObject2 = _taggedTemplateLiteral(["\n    align-items: center;\n    color : ", ";\n    display: flex;\n    font-size : 14px;\n    line-height : 16px;\n    margin-left : ", ";\n    margin-right : ", ";\n    text-align: center;\n"], ["\n    align-items: center;\n    color : ", ";\n    display: flex;\n    font-size : 14px;\n    line-height : 16px;\n    margin-left : ", ";\n    margin-right : ", ";\n    text-align: center;\n"]);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _s2sBaseClass = require("s2s-base-class");

var _s2sBaseClass2 = _interopRequireDefault(_s2sBaseClass);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _s2sThemes = require("s2s-themes");

var _immutable = require("immutable");

var _s2sSvgIcons = require("s2s-svg-icons");

var svgIcons = _interopRequireWildcard(_s2sSvgIcons);

var _styledComponents = require("styled-components");

var _styledComponents2 = _interopRequireDefault(_styledComponents);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

//import { injectIntl } from 'react-intl';

var icons = _extends({}, svgIcons);

var ButtonTemplate = _styledComponents2.default.button(_templateObject, function (props) {
  return props.bgColorDefault;
}, function (props) {
  return props.buttonShape === "rectangle" ? ' 4px' : '100%';
}, function (props) {
  return props.svgPosition === 'left' ? "row" : "row-reverse";
}, function (props) {
  return props.height;
}, function (props) {
  return props.buttonShape === "round" ? '4px' : '0px';
}, function (props) {
  return props.buttonShape === "round" ? ' 4px' : '0px';
}, function (props) {
  return props.buttonType === 'icon' ? '8px' : '16px';
}, function (props) {
  return props.buttonType === 'icon' ? '8px' : '16px';
}, function (props) {
  return props.bgColorHover;
}, _s2sThemes.colorGrid.blue5);

var LabelTemplate = _styledComponents2.default.div(_templateObject2, function (props) {
  return props.fontColor;
}, function (props) {
  if (props.hasSVG === true) {
    return props.svgPosition === 'left' ? '8px' : '0px';
  }
}, function (props) {
  if (props.hasSVG === true) {
    return props.svgPosition === 'left' ? '0px' : '8px';
  }
});

var Button = function (_S2SBaseComponent) {
  _inherits(Button, _S2SBaseComponent);

  function Button(props) {
    _classCallCheck(this, Button);

    var _this = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this, props));

    _this.displayName = "Button";

    _this.state = {
      isHover: false
    };

    _this.renderSVG = _this.renderSVG.bind(_this);
    _this.getStylesBasedOnType = _this.getStylesBasedOnType.bind(_this);
    _this.getStylesBasedOnSize = _this.getStylesBasedOnSize.bind(_this);
    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);
    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);

    return _this;
  }

  _createClass(Button, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !(0, _immutable.fromJS)(nextProps).equals((0, _immutable.fromJS)(this.props)) || !(0, _immutable.fromJS)(nextState).equals((0, _immutable.fromJS)(this.state));
    }
  }, {
    key: "getStylesBasedOnType",
    value: function getStylesBasedOnType() {

      var stylesBasedOnType = void 0;
      switch (this.props.buttonType) {
        case 'primaryRed':
          stylesBasedOnType = {
            'bgColorDefault': _s2sThemes.colorGrid.red6,
            'bgColorHover': _s2sThemes.colorGrid.red8,
            'fontColor': _s2sThemes.colorGrid.gray0,
            'borderColor': 'transparent'
          };
          break;
        case 'primaryBlue':
          stylesBasedOnType = {
            'bgColorDefault': _s2sThemes.colorGrid.blue6,
            'bgColorHover': _s2sThemes.colorGrid.blue8,
            'fontColor': _s2sThemes.colorGrid.gray0,
            'borderColor': 'transparent'
          };
          break;
        case 'primaryGreen':
          stylesBasedOnType = {
            'bgColorDefault': _s2sThemes.colorGrid.green6,
            'bgColorHover': _s2sThemes.colorGrid.green8,
            'fontColor': _s2sThemes.colorGrid.gray0,
            'borderColor': 'transparent'
          };
          break;
        case 'secondary':
          stylesBasedOnType = {
            // TODO : this.props.theme doesn't exist right now. So it is blowing up the app. Uncomment code once themeing is implemented
            // 'bgColorDefault': this.props.theme.bg,
            // 'bgColorHover': this.props.theme.bghover,
            // 'fontColor': this.props.theme.fg,
            'borderColor': '#979797'
          };
          break;
        case 'icon':
          stylesBasedOnType = {
            // TA - for now, use gray2 for default, gray4 for hover, gray5 for font/fill, gray8 for hover fill...
            'bgColorDefault': _s2sThemes.colorGrid.gray4,
            'bgColorHover': _s2sThemes.colorGrid.gray2,
            'fillColor': _s2sThemes.colorGrid.gray5,
            'fillColorHover': _s2sThemes.colorGrid.gray8,
            'height': '40px',
            'padding': '0px 8px'
          };

          break;
        case 'outline':
        case 'ghost':
        default:
          stylesBasedOnType = {
            'bgColorDefault': 'inherit',
            'bgColorHover': 'inherit'

          };
      }

      return stylesBasedOnType;
    }
  }, {
    key: "getStylesBasedOnSize",
    value: function getStylesBasedOnSize() {
      var stylesBasedOnSize = void 0;

      if (this.props.buttonType === 'icon') {
        return {
          'buttonHeight': '40px'
        };
      }

      switch (this.props.buttonSize) {
        case 'small':
          stylesBasedOnSize = {
            'buttonHeight': '24px'
          };
          break;
        case 'medium':
          stylesBasedOnSize = {
            'buttonHeight': '32px'
          };
          break;
        case 'large':
          stylesBasedOnSize = {
            'buttonHeight': '40px'
          };
          break;
        default:
          stylesBasedOnSize = {
            'buttonHeight': 'inherit'
          };
      }

      return stylesBasedOnSize;
    }
  }, {
    key: "handleMouseEnter",
    value: function handleMouseEnter() {
      this.setState(function (prevState) {
        return _extends({}, prevState, { isHover: true });
      });
    }
  }, {
    key: "handleMouseLeave",
    value: function handleMouseLeave() {
      this.setState(function (prevState) {
        return _extends({}, prevState, { isHover: false });
      });
    }

    /*
      NAME: renderSVG
      DESCRIPTION: A function that checks if {this.props.svgType} exists in our component library.
      If so it renders the JSX for that SVG dynamically. 
      ARGUMENTS: None.
      RETURN: Returns JSX for an SVG in our component library.
      CALLED: Called in the render method.
    */

  }, {
    key: "renderSVG",
    value: function renderSVG() {
      var displaySvg = void 0;

      if (this.props.svgType && icons.hasOwnProperty(this.props.svgType)) {
        var DynamicSVG = icons[this.props.svgType];

        if (this.props.buttonType === 'icon') {
          var svgStyles = this.getStylesBasedOnType('icon');
          displaySvg = _react2.default.createElement(DynamicSVG, {
            className: this.props.svgType,
            svgStyle: {
              fill: this.state.isHover ? svgStyles.fillColorHover : svgStyles.fillColor,
              height: '24px',
              width: '24px'
            }
          });
        } else {
          displaySvg = _react2.default.createElement(DynamicSVG, {
            className: this.props.svgType,
            svgStyle: {
              fill: this.props.svgFill,
              height: this.props.buttonSize === 'large' ? '32px' : '24px',
              width: this.props.buttonSize === 'large' ? '32px' : '24px'
            }
          });
        }
      }

      return displaySvg;
    }
  }, {
    key: "render",
    value: function render() {

      return _react2.default.createElement(
        ButtonTemplate,
        {
          "aria-label": this.props.ariaLabel,
          className: "Button Container " + this.props.className + " ",
          bgColorDefault: this.getStylesBasedOnType().bgColorDefault,
          bgColorHover: this.getStylesBasedOnType().bgColorHover,
          borderColor: this.getStylesBasedOnType().borderColor,
          buttonShape: this.props.buttonShape,
          buttonType: this.props.buttonType,
          height: this.getStylesBasedOnSize().buttonHeight,
          disabled: this.props.isDisabled,
          svgPosition: this.props.svgPosition,
          onClick: this.props.cbClick,
          tabIndex: 0,
          onMouseEnter: this.handleMouseEnter,
          onMouseLeave: this.handleMouseLeave
        },
        this.renderSVG(),
        this.props.buttonLabel !== undefined && this.props.buttonType !== 'icon' ? _react2.default.createElement(
          LabelTemplate,
          {
            buttonSize: this.props.buttonSize,
            buttonType: this.props.buttonType,
            fontColor: this.getStylesBasedOnType().fontColor,
            hasSVG: this.props.svgType !== undefined ? true : false,
            isDisabled: this.props.isDisabled,
            svgPosition: this.props.svgPosition
          },
          this.props.buttonLabel
        ) : undefined
      );
    }
  }]);

  return Button;
}(_s2sBaseClass2.default);

Button.propTypes = {
  ariaLabel: _propTypes2.default.string,
  buttonLabel: _propTypes2.default.string,
  buttonSize: _propTypes2.default.oneOf(["small", "medium", "large"]),
  buttonShape: _propTypes2.default.oneOf(["round", "rectangle"]),
  buttonType: _propTypes2.default.oneOf(["primaryRed", "primaryGreen", "primaryBlue", "secondary", "outline", "ghost", "flux", "icon"]),
  cbClick: _propTypes2.default.func,
  compStyle: _propTypes2.default.object,
  svgFill: _propTypes2.default.string,
  svgType: _propTypes2.default.string,
  svgPosition: _propTypes2.default.oneOf(["left", "right"]),
  isDisabled: _propTypes2.default.bool
};
Button.defaultProps = {
  ariaLabel: "ariaLabel is not defined",
  buttonLabel: undefined,
  buttonShape: "rectangle",
  buttonSize: "medium",
  buttonType: "primaryRed",
  cbClick: function cbClick() {
    console.log("Default callback function");
  },
  compStyle: {},
  isDisabled: false,
  svgFill: "currentColor",
  svgType: undefined,
  svgPosition: "left"
};
Button.filename = 's2s-button';
Button.displayName = 'Button';
exports.default = Button;
// BY KC Nichols - 05/16/2018
