'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if('value'in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();var _react=require('react');var _react2=_interopRequireDefault(_react);var _s2sBaseClass=require('s2s-base-class');var _s2sBaseClass2=_interopRequireDefault(_s2sBaseClass);var _immutable=require('immutable');var _timeView=require('./timeView');var _timeView2=_interopRequireDefault(_timeView);var _moment=require('moment');var _moment2=_interopRequireDefault(_moment);var _calendar=require('./calendar');var _calendar2=_interopRequireDefault(_calendar);var _s2sInput=require('s2s-input');var _s2sInput2=_interopRequireDefault(_s2sInput);require('moment-range');require('moment/locale/da');require('moment/locale/de');require('moment/locale/es');require('moment/locale/fr');require('moment/locale/id');require('moment/locale/it');require('moment/locale/pl');require('moment/locale/pt');require('moment/locale/ru');require('moment/locale/sv');require('moment/locale/zh-cn');var _styles=require('./styles.js');var _styles2=_interopRequireDefault(_styles);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function')}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called')}return call&&(typeof call==='object'||typeof call==='function')?call:self}function _inherits(subClass,superClass){if(typeof superClass!=='function'&&superClass!==null){throw new TypeError('Super expression must either be null or a function, not '+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var momentLocale;var isTwelveHour;var DatePicker=function(_S2SBaseComponent){_inherits(DatePicker,_S2SBaseComponent);function DatePicker(props){_classCallCheck(this,DatePicker);var _this=_possibleConstructorReturn(this,(DatePicker.__proto__||Object.getPrototypeOf(DatePicker)).call(this,props));_this.displayName='DatePicker';_this.state={dropDownDisplayed:false,// drop down visibility
calendarDisplayed:true,// button styles relevant to calendar, displays calendar in dropdown
timeDisplayed:false,// button styles relevant to time, displays time in dropdown
timestamp:_this.props.timestamp,hourValue:(0,_moment2.default)(_this.props.timestamp).format('HH'),// NOTE: 24hour based
minuteValue:(0,_moment2.default)(_this.props.timestamp).format('mm'),onDateHover:undefined,onTimeHover:undefined};// Setting locale
momentLocale=_this.props.locale;if(_this.props.intl){if(_this.props.intl.locale=='zh'){momentLocale='zh-cn'}else{momentLocale=_this.props.intl.locale}}_moment2.default.locale(momentLocale);isTwelveHour=_this.props.isTwelveHour;// if a locale is specified determine isTwelveHour formatting based on THAT. Disregard isTwelveHour prop.
if(_this.props.dateTimeFormat.indexOf('LT')!==-1){var LT=_moment2.default.localeData(momentLocale)._longDateFormat.LT;var LTS=_moment2.default.localeData(momentLocale)._longDateFormat.LTS;if(LT.charAt(0)=='h'||LTS.charAt(0)=='h'){isTwelveHour=true}else{isTwelveHour=false}}// Getting formats for input value and CalendarButton
var hIndex=_this.props.dateTimeFormat.indexOf('H')!=-1?_this.props.dateTimeFormat.indexOf('H')-1:_this.props.dateTimeFormat.indexOf('h')-1;_this.dateFormat=_this.props.displayTime==true?_this.props.dateTimeFormat.slice(0,hIndex):_this.props.dateTimeFormat;// The date format only.
_this.inputFormat=_this.props.dateTimeFormat;// The whole date format including time (if provided)
// Alerting user that their values for the displayTime and dateTimeFormat are conflicting
var colonExists=(0,_moment2.default)(_this.props.timestamp).format(_this.inputFormat).indexOf(':')!==-1;if(colonExists&&_this.props.displayTime==false){console.warn('Time has been provided for dateTimeFormat and displayTime is false. Please note that time will only be editable via the input area. ')}_this.handleChangeStartTime=_this.handleChangeStartTime.bind(_this);_this.handleInputChange=_this.handleInputChange.bind(_this);_this.handleTimeChange=_this.handleTimeChange.bind(_this);_this.getTimeBtnLabel=_this.getTimeBtnLabel.bind(_this);_this.getDateBtnLabel=_this.getDateBtnLabel.bind(_this);_this.getDisplayedHourValue=_this.getDisplayedHourValue.bind(_this);_this.getDisplayedAmpm=_this.getDisplayedAmpm.bind(_this);_this.dropDownToggle=_this.dropDownToggle.bind(_this);// this.calendarTimeToggle = this.calendarTimeToggle.bind(this);
_this.handleInputBlur=_this.handleInputBlur.bind(_this);_this.handleInputOnEnter=_this.handleInputOnEnter.bind(_this);_this.calendarToggle=_this.calendarToggle.bind(_this);_this.timeToggle=_this.timeToggle.bind(_this);_this.handleMouseEnterTime=_this.handleMouseEnterTime.bind(_this);_this.handleMouseLeaveTime=_this.handleMouseLeaveTime.bind(_this);_this.handleMouseEnterDate=_this.handleMouseEnterDate.bind(_this);_this.handleMouseLeaveDate=_this.handleMouseLeaveDate.bind(_this);_this.prefetchStyles();return _this}_createClass(DatePicker,[{key:'componentWillReceiveProps',value:function componentWillReceiveProps(nextProps){if(nextProps.hasOwnProperty('dateTimeFormat')){this.inputFormat=nextProps.dateTimeFormat}}},{key:'shouldComponentUpdate',value:function shouldComponentUpdate(nextProps,nextState){return!(0,_immutable.fromJS)(nextProps).equals((0,_immutable.fromJS)(this.props))||!(0,_immutable.fromJS)(nextState).equals((0,_immutable.fromJS)(this.state))}},{key:'getDefaultStyle',value:function getDefaultStyle(styleName,objectPropState){return(0,_styles2.default)(styleName,objectPropState)}// Function that is invoked whenever CalendarView has changed.
// It sets state for timestamp and passes the new timestamp in as an argument for cbSelectDate
},{key:'handleChangeStartTime',value:function handleChangeStartTime(newDate){//console.log('handleChangeStartTime arguments :', newDate);
var updatedTimestamp=(0,_moment2.default)(newDate).set({hour:this.state.hourValue,minute:this.state.minuteValue,millisecond:0}).valueOf();this.setState(_extends({},this.state,{timestamp:updatedTimestamp}));this.props.cbSelectDate(updatedTimestamp)}// Function that handles 24hr time and sets state for hourValue, minuteValue, and timestamp.
// This function is invoked anytime the input has changed in TimeView.
},{key:'handleTimeChange',value:function handleTimeChange(hour,minute,ampm){//console.log('handleTimeChange arguments :', hour, minute, ampm);
// update time with values from timeView
var newHour=void 0;var newMinute=void 0;// set the hour
if(isTwelveHour===true){// NOTE
// need to convert to 24 hour format
if(Number(hour)===12&&ampm=='am'){newHour=0}else if(Number(hour)<12&&ampm=='pm'){newHour=Number(hour)+12}else{newHour=Number(hour)}}else{// 24 hour time format
newHour=Number(hour)}// set minutes
newMinute=minute;// set the values in state...
var newTimestamp=(0,_moment2.default)(this.state.timestamp).set({hour:newHour,minute:newMinute}).valueOf();this.setState(_extends({},this.state,{hourValue:newHour,minuteValue:newMinute,timestamp:newTimestamp}))}// Function that will validate the value provided in input.
// User input must match the format that has been set.
},{key:'handleInputChange',value:function handleInputChange(inputValue){//console.log('handleInputChange argument:', inputValue);
if((0,_moment2.default)(inputValue,this.props.dateTimeFormat).isValid()){var startTimestamp=(0,_moment2.default)(inputValue,this.props.dateTimeFormat).valueOf();var newHour=(0,_moment2.default)(startTimestamp).format('HH');var newMinute=(0,_moment2.default)(startTimestamp).format('mm');this.setState(_extends({},this.state,{timestamp:startTimestamp,hourValue:newHour,minuteValue:newMinute}))}else{// users input does not match
console.error('The value you provided : '+inputValue+' is not valid.')}}// Function that returns a string that represents the hour that can be seen
// on the TimeView Button and TimeView component.
},{key:'getDisplayedHourValue',value:function getDisplayedHourValue(){var _this2=this;var hour=void 0;var convertToTwelveHour=function convertToTwelveHour(){if(_this2.state.hourValue==0){// NOTE: hourValue is 24hr based
return 12}else if(_this2.state.hourValue>12){return _this2.state.hourValue-12}else{return _this2.state.hourValue}};if(isTwelveHour){hour=convertToTwelveHour()}else{hour=this.state.hourValue}var padHour='0'+hour;return padHour.substring(padHour.length-2)}// Function that returns a string that represents the ampm value that can be seen
// on the TimeView Button and TimeView component.
},{key:'getDisplayedAmpm',value:function getDisplayedAmpm(){var ampmValue='';if(isTwelveHour){// NOTE
if(this.state.hourValue<12){// NOTE: hourValue is 24hr based
ampmValue='am'}else{ampmValue='pm'}}// if not twelvehour time, return empty string
return ampmValue}// Function that returns a string that represents the time value that can be seen
// on the TimeView Button.
},{key:'getTimeBtnLabel',value:function getTimeBtnLabel(){return this.getDisplayedHourValue()+':'+this.state.minuteValue+' '+this.getDisplayedAmpm()}// Function that returns a string that represents the date value that can be seen
// on the CalendarView Button.
},{key:'getDateBtnLabel',value:function getDateBtnLabel(){return(0,_moment2.default)(this.state.timestamp).format(this.dateFormat)}},{key:'dropDownToggle',value:function dropDownToggle(){// if this.state.dropDownDisplayed is true, then callback with value to parent (and close the dropdown)
if(this.state.dropDownDisplayed==true){this.props.cbSelectDate(this.state.timestamp)}this.setState(_extends({},this.state,{dropDownDisplayed:!this.state.dropDownDisplayed}))}},{key:'calendarToggle',value:function calendarToggle(){if(!this.state.calendarDisplayed){this.setState(_extends({},this.state,{calendarDisplayed:true,timeDisplayed:false}))}}},{key:'timeToggle',value:function timeToggle(){if(!this.state.timeDisplayed){this.setState(_extends({},this.state,{calendarDisplayed:false,timeDisplayed:true}))}}},{key:'handleMouseEnterDate',value:function handleMouseEnterDate(){this.setState(_extends({},this.state,{'onDateHover':true}))}},{key:'handleMouseEnterTime',value:function handleMouseEnterTime(){this.setState(_extends({},this.state,{'onTimeHover':true}))}},{key:'handleMouseLeaveDate',value:function handleMouseLeaveDate(){this.setState(_extends({},this.state,{'onDateHover':false}))}},{key:'handleMouseLeaveTime',value:function handleMouseLeaveTime(){this.setState(_extends({},this.state,{'onTimeHover':false}))}},{key:'handleInputBlur',value:function handleInputBlur(e){this.handleInputChange(e.target.value)}},{key:'handleInputOnEnter',value:function handleInputOnEnter(v){this.handleInputChange(v)}},{key:'prefetchStyles',value:function prefetchStyles(){this.dropdownWrapper=this.getStyle('dropdownWrapper');this.datePicker=this.getStyle('datePicker');this.topContainer=this.getStyle('topContainer');this.inputStyle=this.getStyle('inputStyle');this.positionedButtonsWrapper=this.props.displayTime?_extends({},this.getStyle('positionedButtonsWrapper'),{paddingRight:'0px'}):_extends({},this.getStyle('positionedButtonsWrapper'),{paddingRight:'100px'});this.dateButton=this.getStyle('dateButton');this.dateButtonActive=this.getStyle('dateButtonActive');this.dateButtonHover=this.getStyle('dateButtonHover');this.timeButton=this.getStyle('timeButton');this.timeButtonActive=this.getStyle('timeButtonActive');this.timeButtonHover=this.getStyle('timeButtonHover')}},{key:'render',value:function render(){var positionedButtonsStyle=void 0;if(this.state.dropDownDisplayed){positionedButtonsStyle=_extends({},this.positionedButtonsWrapper,{display:'flex',top:'7px'})}else{positionedButtonsStyle=_extends({},this.positionedButtonsWrapper,{display:'none',top:'-1000px'})}var dateButtonStyles=void 0;if(this.state.calendarDisplayed){dateButtonStyles=this.dateButtonActive}else if(this.state.onDateHover){dateButtonStyles=this.dateButtonHover}else{dateButtonStyles=this.dateButton}var timeButtonStyles=void 0;if(this.state.timeDisplayed){timeButtonStyles=this.timeButtonActive}else if(this.state.onTimeHover){timeButtonStyles=this.timeButtonHover}else{timeButtonStyles=this.timeButton}var inputStyles=void 0;if(this.state.dropDownDisplayed){if(this.state.calendarDisplayed){inputStyles=_extends({},this.inputStyle,{svgArea:{backgroundColor:'#228ae6',border:'1px solid #228ae6'},noSVGArea:{fill:'#f8f9fa'},svgStyle:{fill:'#f8f9fa'},svgStyleWithHover:{fill:'#f8f9fa'}})}else{inputStyles=_extends({},this.inputStyle,{svgArea:{backgroundColor:'#228ae6',border:'1px solid #228ae6'},noSVGArea:{fill:'#f8f9fa'},svgStyle:{fill:'#f8f9fa'},svgStyleWithHover:{fill:'#212529'}})}}else{inputStyles=_extends({},this.inputStyle,{svgArea:{backgroundColor:undefined,border:'1px solid #dee2e6'},noSVGArea:{fill:'#212529'},svgStyle:{fill:'#212529'}})}// let dateButtonStyles = this.state.calendarDisplayed  ? {
//   ...this.dateButton,
//   buttonStyles: {...this.dateButton.buttonStyles, backgroundColor: '#228ae6'},
//   labelStyles : {...this.dateButton.labelStyles, color: '#f8f9fa'},
//   hoverButtonStyles : {...this.dateButton.hoverButtonStyles, backgroundColor: '#228ae6'}
// } :
// {
//   ...this.dateButton,
//   buttonStyles: {...this.dateButton.buttonStyles, backgroundColor: '#f8f9fa'},
//   labelStyles : {...this.dateButton.labelStyles, color: '#212529'},
//   hoverButtonStyles : {...this.dateButton.hoverButtonStyles, backgroundColor: '#e9ecef'}
// };
//
// let timeButtonStyles = this.state.calendarDisplayed ? {
//   ...this.timeButtonStyle,
//   buttonStyles: {...this.timeButton.buttonStyles, backgroundColor: '#228ae6'},
//   labelStyles : {...this.timeButton.labelStyles, color: '#f8f9fa'},
//   hoverButtonStyles : {...this.timeButton.hoverButtonStyles, backgroundColor: '#228ae6'}
// } :
// {
//   ...this.timeButtonStyle,
//   buttonStyles: {...this.timeButton.buttonStyles, backgroundColor: '#f8f9fa'},
//   labelStyles : {...this.timeButton.labelStyles, color: '#212529'},
//   hoverButtonStyles : {...this.timeButton.hoverButtonStyles, backgroundColor: '#e9ecef'}
// };
// timeView will return either TimeView component or undefined based on displayTime prop
var timeView=this.props.disabled?undefined:_react2.default.createElement('div',{style:this.dropdownWrapper},_react2.default.createElement(_timeView2.default,{hour:this.getDisplayedHourValue(),minute:this.state.minuteValue,ampm:this.getDisplayedAmpm(),cbInputChange:this.handleTimeChange,isTwelveHour:isTwelveHour,locale:momentLocale}));// calendarView will return Calendar component
var calendarView=this.props.disabled?undefined:_react2.default.createElement('div',{style:this.dropdownWrapper},_react2.default.createElement(_calendar2.default,{key:'Calendar',isDisplayed:this.state.calendarDisplayed,timestamp:this.state.timestamp//disabled={this.props.disabled}
,minDate:this.props.minDate,maxDate:this.props.maxDate,cbSetDate:this.handleChangeStartTime,cbChange:this.handleChangeStartTime}));var dropDownView=undefined;var timeBtnLabel=this.getTimeBtnLabel();var dateBtnLabel=this.getDateBtnLabel();switch(this.state.dropDownDisplayed==true){case true:if(this.state.calendarDisplayed==true){dropDownView=calendarView}else{dropDownView=timeView}break;}return _react2.default.createElement('div',{className:'datePicker',style:this.datePicker},_react2.default.createElement('div',{className:'topContainer',style:this.topContainer},_react2.default.createElement(_s2sInput2.default,{hasSVG:true,svgOverride:'CalendarIconSVG',cbIconClick:this.dropDownToggle,compStyle:inputStyles,value:(0,_moment2.default)(this.state.timestamp).format(this.inputFormat),placeholder:this.props.placeholder,cbOnBlur:this.handleInputBlur,cbOnEnter:this.handleInputOnEnter}),_react2.default.createElement('div',{className:'positionedButtonsWrapper',style:positionedButtonsStyle},_react2.default.createElement('button',{style:dateButtonStyles,'aria-label':'view date drop down',onClick:this.calendarToggle,onMouseOver:this.handleMouseEnterDate,onMouseOut:this.handleMouseLeaveDate},dateBtnLabel),this.props.displayTime?_react2.default.createElement('button',{style:timeButtonStyles,'aria-label':'view time drop down',onClick:this.timeToggle,onMouseOver:this.handleMouseEnterTime,onMouseOut:this.handleMouseLeaveTime},timeBtnLabel):undefined)),dropDownView)}},{key:'value',// Getter function that returns a timestamp
get:function get(){return this.state.timestamp}}]);return DatePicker}(_s2sBaseClass2.default);DatePicker.propTypes={cbSelectDate:_react2.default.PropTypes.func,compStyle:_react2.default.PropTypes.object,dateTimeFormat:_react2.default.PropTypes.string,disabled:_react2.default.PropTypes.bool,displayTime:_react2.default.PropTypes.bool,isTwelveHour:_react2.default.PropTypes.bool,locale:_react2.default.PropTypes.string,maxDate:_react2.default.PropTypes.object,minDate:_react2.default.PropTypes.object,placeholder:_react2.default.PropTypes.string,timestamp:_react2.default.PropTypes.number};DatePicker.defaultProps={cbSelectDate:function cbSelectDate(){console.log('Please provide a callback function for cbSelectDate')},dateTimeFormat:'YYYY-MM-DD hh:mm a',disabled:false,displayTime:true,isTwelveHour:true,locale:'en',placeholder:'Please enter a date',timestamp:Date.now()};DatePicker.filename='s2s-date-picker.js';DatePicker.displayName='DatePicker';DatePicker.thumbnail='';exports.default=DatePicker;
