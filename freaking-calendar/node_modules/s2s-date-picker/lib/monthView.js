'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _s2sBaseClass = require('s2s-base-class');

var _s2sBaseClass2 = _interopRequireDefault(_s2sBaseClass);

var _immutable = require('immutable');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

require('moment-range');

var _cell = require('./cell');

var _cell2 = _interopRequireDefault(_cell);

var _viewHeader = require('./viewHeader');

var _viewHeader2 = _interopRequireDefault(_viewHeader);

var _styles = require('./styles.js');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MonthView = function (_S2SBaseComponent) {
  _inherits(MonthView, _S2SBaseComponent);

  function MonthView(props) {
    _classCallCheck(this, MonthView);

    var _this = _possibleConstructorReturn(this, (MonthView.__proto__ || Object.getPrototypeOf(MonthView)).call(this, props));

    _this.displayName = 'MonthView';
    _this.state = {};

    _this.cellClick = _this.cellClick.bind(_this);
    _this.handleTitleClick = _this.handleTitleClick.bind(_this);
    _this.checkIfMonthDisabled = _this.checkIfMonthDisabled.bind(_this);
    _this.getMonth = _this.getMonth.bind(_this);
    _this.prev = _this.prev.bind(_this);
    _this.next = _this.next.bind(_this);
    _this.monthsOnKeyPress = _this.monthsOnKeyPress.bind(_this);

    _this.prefetchStyles();
    return _this;
  }

  _createClass(MonthView, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !(0, _immutable.fromJS)(nextProps).equals((0, _immutable.fromJS)(this.props)) || !(0, _immutable.fromJS)(nextState).equals((0, _immutable.fromJS)(this.state));
    }
  }, {
    key: 'getDefaultStyle',
    value: function getDefaultStyle(styleName, objectPropState) {
      return (0, _styles2.default)(styleName, objectPropState);
    }
  }, {
    key: 'cellClick',
    value: function cellClick(e) {
      var month = e.target.innerHTML;
      if (this.checkIfMonthDisabled(month)) return;

      var date = this.props.dateVal.clone().month(month);
      this.props.cbPrevView(date);
    }
  }, {
    key: 'checkIfMonthDisabled',
    value: function checkIfMonthDisabled(month) {
      var now = this.props.dateVal;
      return now.clone().month(month).endOf('month').isBefore(this.props.minDate, 'day') || now.clone().month(month).startOf('month').isAfter(this.props.maxDate, 'day');
    }
  }, {
    key: 'getMonth',
    value: function getMonth() {
      var _this2 = this;

      var month = this.props.dateVal.month();
      return _moment2.default.monthsShort().map(function (item, i) {
        return {
          label: item,
          disabled: _this2.checkIfMonthDisabled(i),
          curr: i === month
        };
      });
    }
  }, {
    key: 'next',
    value: function next() {
      var nextDate = this.props.dateVal.clone().add(1, 'years');
      if (this.props.maxDate && nextDate.isAfter(this.props.maxDate, 'day')) {
        nextDate = this.props.maxDate;
      }
      this.props.cbSetDate(nextDate);
    }
  }, {
    key: 'prev',
    value: function prev() {
      var prevDate = this.props.dateVal.clone().subtract(1, 'years');
      if (this.props.minDate && prevDate.isBefore(this.props.minDate, 'day')) {
        prevDate = this.props.minDate;
      }
      this.props.cbSetDate(prevDate);
    }
  }, {
    key: 'handleTitleClick',
    value: function handleTitleClick(type) {
      switch (type) {
        case 'previous':
          this.prev();
          break;
        case 'title':
          this.props.cbNextView();
          break;
        case 'next':
          this.next();
          break;
      }
    }
  }, {
    key: 'monthsOnKeyPress',
    value: function monthsOnKeyPress(e) {
      if (e.charCode == '13') {
        this.cellClick(e);
      }
    }
  }, {
    key: 'prefetchStyles',
    value: function prefetchStyles() {
      this.month = this.getStyle('month');
      this.viewHeader = this.getStyle('viewHeader');
      this.monthWrapper = this.getStyle('monthWrapper');
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var months = this.getMonth().map(function (item, i) {
        return _react2.default.createElement(_cell2.default, {
          key: i,
          label: item.label,
          dateVal: item.label,
          compStyle: { cellWrapper: _extends({}, _this3.month) }
        });
      });

      return _react2.default.createElement(
        'div',
        {
          className: 'months-view'
        },
        _react2.default.createElement(_viewHeader2.default, {
          key: 'ViewHeader - Month',
          headerData: this.props.dateVal.format('YYYY'),
          cbHeaderClick: this.handleTitleClick,
          compStyle: this.viewHeader
        }),
        _react2.default.createElement(
          'div',
          {
            className: 'months',
            onClick: this.cellClick,
            tabIndex: 0,
            onKeyPress: this.monthsOnKeyPress,
            style: this.monthWrapper
          },
          months
        )
      );
    }
  }]);

  return MonthView;
}(_s2sBaseClass2.default);

MonthView.propTypes = {
  cbNextView: _react2.default.PropTypes.func,
  cbPrevView: _react2.default.PropTypes.func,
  cbSetDate: _react2.default.PropTypes.func,
  dateVal: _react2.default.PropTypes.object.isRequired,
  maxDate: _react2.default.PropTypes.object, // moment date object
  minDate: _react2.default.PropTypes.object // moment date object
};
MonthView.defaultProps = {
  cbNextView: function cbNextView() {
    console.log('Please provide a callback function for cbNextView');
  },
  cbPrevView: function cbPrevView() {
    console.log('Please provide a callback function for cbPrevView');
  },
  cbSetDate: function cbSetDate() {
    console.log('Please provide a callback function for cbSetDate');
  },
  minDate: (0, _moment2.default)().add(-10000, 'months'),
  maxDate: (0, _moment2.default)().add(10000, 'months')
};
exports.default = MonthView;
