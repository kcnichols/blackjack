import React from 'react';
import S2SBaseComponent from 's2s-base-class';
import { fromJS } from 'immutable';
import Cell from './cell.js';
import Button from 's2s-button';
import 'moment-range';
import moment from 'moment';
import defaultComponentStyle from "./styles.js";

class TimeView extends S2SBaseComponent {
  constructor(props){
    super(props);
    this.displayName = 'TimeView';

    // Initialize state with incoming props for hour and minute.
    this.state = {
      inputWithFocus : "hour",
      hourValue: this.props.hour,
      minuteValue: this.props.minute,
      ampm: this.props.ampm
    };

    //this.updateInputs = this.updateInputs.bind(this); // NOTE: This is not being invoked anywhere.
    this.getButtons = this.getButtons.bind(this);
    this.handleInputChange = this.handleInputChange.bind(this);
    this.ampmClick = this.ampmClick.bind(this);
    moment.locale(this.props.locale);
    this.changeTimer = 0;

    this.hourOnFocus = this.hourOnFocus.bind(this);
    this.minuteOnFocus = this.minuteOnFocus.bind(this);
    //this.emptyFunc = this.emptyFunc.bind(this); // NOTE: I'm not sure what this function is supposed to do. I was instructed by James to delete but I will comment out for now until I can speak with Elizabeth about it's purpose. - KCN
    this.backOnClick = this.backOnClick.bind(this);

    this.prefetchStyles();
  }

  static propTypes = {
    ampm : React.PropTypes.string,
    cbInputChange : React.PropTypes.func,
    compStyle : React.PropTypes.object,
    hour : React.PropTypes.string,
    isTwelveHour : React.PropTypes.bool,
    locale : React.PropTypes.string,
    minute : React.PropTypes.string
  };

  static defaultProps = {
    ampm : 'am',
    cbInputChange : ()=>{ console.log('Please provide a callback function for cbInputChange'); },
    isTwelveHour : true,
    hour: '12',
    locale : 'en',
    minute : '00'
  };

  componentWillReceiveProps(nextProps) {
    if(nextProps.hasOwnProperty('hour')) {
      this.setState({ ...this.state, hourValue : nextProps.hour });
    }

    if(nextProps.hasOwnProperty('minute')) {
      this.setState({ ...this.state, minuteValue : nextProps.minute });
    }

    if(nextProps.hasOwnProperty('ampm')) {
      this.setState({ ...this.state, ampm : nextProps.ampm });
    }
  }

  shouldComponentUpdate(nextProps, nextState) {
    return !fromJS(nextProps).equals(fromJS(this.props)) || !fromJS(nextState).equals(fromJS(this.state));
  }

  componentDidMount() {
    this.refs[this.state.inputWithFocus].focus();
  }

  getDefaultStyle(styleName, objectPropState)  {
    return defaultComponentStyle(styleName, objectPropState);
  }

  prefetchStyles(){
    this.button = this.getStyle('button');
    this.buttonArea = this.getStyle('buttonArea');
    this.backButton = this.getStyle('backButton');
    this.timeWrapper = this.getStyle('timeWrapper');
    this.timeFormatWrapper = this.getStyle('timeFormatWrapper');
    this.topContainerTimeView = this.getStyle('topContainerTimeView');
    this.hourWrapper = this.getStyle('hourWrapper');
    this.hourStyle = this.getStyle('hour');
    this.minuteWrapper = this.getStyle('minuteWrapper');
    this.minuteStyle = this.getStyle('minute');
    this.dateTimeStyle = this.getStyle('dateTime');
    this.buttonWrapperStyles = this.getStyle('buttonWrapperStyles');
  }

  // emptyFunc(e){
  //   console.log('>>>>>>>>')
  //   if(e.charCode == '13') {
  //
  //   }
  // }

  backOnClick(){
    if(this.state.inputWithFocus == 'hour' ) {
      this.setState({...this.state, hourValue : this.state.hourValue.substr(0, this.state.hourValue.length -1 )});
    } else {
      this.setState({...this.state, minuteValue : this.state.minuteValue.substr(0, this.state.minuteValue.length - 1 )});
    }
  }

  getButtons() {
    const buttons = ['1','2','3','4','5','6','7','8','9','0'].map((button, i)=>{
      return (
        <div
            style={button !== '0' ? this.button : {...this.button, width: '60px', flex: '4 0 43%', marginLeft: '5px' }}
            key={i}
            role='buttons'
            tabIndex={0}
            onClick={this.handleInputChange}
            //onKeyPress={this.emptyFunc}
        >
            <Cell
                key={i}
                dateVal={button}
            />
        </div>
      );
    });
    return (
      <div
          style={this.buttonArea}
      >
          {buttons}
          <Button
              ariaLabel="Back space button"
              svgType="BackspaceIconSVG"
              compStyle={this.backButton}
              cbClick={this.backOnClick}
          />
      </div>
    );
  }

  // updateInputs(hour,minute,ampm) {
  //   console.log('howwwwwww')
  //   let hourData = this.state.hour;
  //
  //   if(this.props.isTwelveHour == true) {
  //     if(this.state.ampm == 'pm' ) {
  //       if(this.state.hour > 12) {
  //         hourData = this.state.hour + 12;
  //         //console.log(hourData);
  //       }
  //     } else {
  //       hourData = this.state.hour;
  //     }
  //   }
  //   this.props.cbInputChange(hourData,minute,ampm);
  // }

  isTextSelected(input) {
    // returns bool indicating whether all text is selected or not
    if (typeof(input.selectionStart) === "number") {
      return input.selectionStart == 0 && input.selectionEnd == input.value.length;
    } else if (typeof(document.selection) != "undefined") {
      input.focus();
      return document.selection.createRange().text == input.value;
    }
  }

  handleInputChange(event) {
    //console.log('event---', event.nativeEvent);
    let newValue;
    let newState = { ...this.state};

    let valueToUpdate;
    // which input is to be updated?
    if (this.state.inputWithFocus == 'hour') {
      valueToUpdate = 'hourValue';
    } else {
      valueToUpdate = 'minuteValue';
    }

    let targetValue;
    // wrap in try catch so it will continue
    try{
      targetValue = decodeURI(encodeURI(event.target.value));
    } catch(e){
      targetValue = event.target.value;
    }

    // Evaluate the event to get the newValue
    if (event.nativeEvent.type == 'input') {
      newValue = targetValue;
    } else {
      // if all text is selected, replace value, otherwise concat
      newValue = this.isTextSelected(this.refs[this.state.inputWithFocus]) ? event.target.getAttribute('label') : this.state[valueToUpdate] + event.target.getAttribute('label');
    }


    if (newValue.length > 2 && this.state.inputWithFocus == 'minute') {
        // only allow two digits for minutes
        newValue = newValue.substring(0,2);
      }

    if(newValue.length == 2 && this.state.inputWithFocus == 'hour') {
      // jump to minutes input after two hour digits entered
      this.refs.minute.focus();
      newState = { ...newState, inputWithFocus: 'minute'};
    }

    // set newValue in newState
    newState[valueToUpdate] = newValue;

    //console.log('Input on change', valueToUpdate, newValue, newState);
    this.setState({...this.state, ...newState });

    // reset and set timer to callback to parent with new value
    if (this.changeTimer != 0) {
      clearTimeout(this.changeTimer);
    }

    this.changeTimer = setTimeout(()=>{

      let paddedValue = '0'+newValue;
      paddedValue = paddedValue.substring(paddedValue.length - 2);
      // If padding is needed we set the state.
      if(paddedValue !== this.state[valueToUpdate]){
        newState[valueToUpdate] = paddedValue;
        this.setState({ ...this.state, ...newState });
      }

      // Validating numbers are between 1-12 in 12 hour format
      let doSendData = true;
      if(this.props.isTwelveHour && this.state.hourValue > 12) {
        console.error(this.state.hourValue + ' is not a valid value for hour');
        doSendData = false;
      }
      // Validating numbers are between 0-23in 24 hour format
      if(!this.props.isTwelveHour && this.state.hourValue > 23) {
        console.error(this.state.hourValue + ' is not a valid value for hour');
        doSendData = false;
      }
      // Validating numbers are between 0-59 minutes format
      if(this.state.minuteValue > 59) {
        console.error(this.state.minuteValue  + ' is not a valid value for minute');
        doSendData = false;
      }

      if(doSendData == true) {
        this.props.cbInputChange(this.state.hourValue, this.state.minuteValue, this.state.ampm);
      } else {
        console.error('Error: Cannot send cbInputChange() because one or more values are incorrect.');
      }

    }, 2000);
  }

  ampmClick(){
    let ampm;
    if(this.state.ampm == "am") {
      ampm = 'pm';
    } else {
      ampm = 'am';
    }
    this.setState({...this.state, ampm : ampm });
    if (this.changeTimer != 0) {
      clearTimeout(this.changeTimer);
    }
    this.changeTimer = setTimeout(()=>{
        this.props.cbInputChange(this.state.hourValue, this.state.minuteValue, this.state.ampm);
    }, 1000);
  }

  minuteOnFocus(){
    this.refs.minute.select();
    this.setState({...this.state, inputWithFocus: 'minute' });
  }

  hourOnFocus(){
    //console.log('minute focused');
    this.refs.hour.select();
    this.isKeyClickConcat = false;
    this.setState({...this.state, inputWithFocus: 'hour', hourSelected: true});
  }

  render(){
    //console.log('timeView state', this.state);
    return(
      <div
          className = "timeWrapper"
          style={this.timeWrapper}
      >
        <div
            className = "timeFormatWrapper"
            style={this.timeFormatWrapper}
        >
          <div style={this.topContainerTimeView}>
            <div
                className="hourWrapper"
                style={this.hourWrapper}
            >
            <input
                aria-label={(this.getIntlText('ARIA-INPUT', 'Input'))}
                className="hour"
                ref="hour"
                placeholder ="hh"
                style={this.hourStyle}
                value={this.state.hourValue}
                onFocus ={this.hourOnFocus}
                onChange={this.handleInputChange}
            />
          </div>
          :
          <div
              className="minuteWrapper"
              style={this.minuteWrapper}
          >
              <input
                  aria-label = {(this.getIntlText('ARIA-INPUT', 'Input'))}
                  className = "minute"
                  ref="minute"
                  placeholder ="mm"
                  style={this.minuteStyle}
                  value={this.state.minuteValue}
                  onFocus={this.minuteOnFocus}
                  onChange={this.handleInputChange}
              />
          </div>
          {
            this.props.isTwelveHour === false ? undefined :
            <Button
                ariaLabel="date time"
                className = "am-pm"
                placeholder="ampm"
                ref='ampm'
                buttonLabel={this.state.ampm}
                value={this.state.ampm}
                cbClick={this.ampmClick}
                compStyle={this.dateTimeStyle}
            />
          }
        </div>
        </div>
          <div style={this.buttonWrapperStyles}>
            {this.getButtons()}
          </div>
      </div>
    );
  }
}
export default TimeView;
