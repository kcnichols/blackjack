import React from 'react';
import S2SBaseComponent from 's2s-base-class';
import { fromJS } from 'immutable';
import moment from 'moment';
import 'moment-range';
import Cell from './cell';
import ViewHeader from './viewHeader';
import defaultComponentStyle from "./styles.js";

class MonthView extends S2SBaseComponent {
  constructor(props){
      super(props);
      this.displayName = 'MonthView';
      this.state = {};

      this.cellClick = this.cellClick.bind(this);
      this.handleTitleClick = this.handleTitleClick.bind(this);
      this.checkIfMonthDisabled = this.checkIfMonthDisabled.bind(this);
      this.getMonth = this.getMonth.bind(this);
      this.prev = this.prev.bind(this);
      this.next = this.next.bind(this);
      this.monthsOnKeyPress = this.monthsOnKeyPress.bind(this);

      this.prefetchStyles();
  }

  static propTypes = {
    cbNextView: React.PropTypes.func,
    cbPrevView: React.PropTypes.func,
    cbSetDate: React.PropTypes.func,
    dateVal: React.PropTypes.object.isRequired,
    maxDate: React.PropTypes.object, // moment date object
    minDate: React.PropTypes.object // moment date object
  };

  static defaultProps = {
    cbNextView : ()=>{console.log('Please provide a callback function for cbNextView'); },
    cbPrevView : ()=>{console.log('Please provide a callback function for cbPrevView'); },
    cbSetDate :()=>{console.log('Please provide a callback function for cbSetDate'); },
    minDate : moment().add(-10000, 'months'),
    maxDate : moment().add(10000, 'months')
  };

  shouldComponentUpdate(nextProps, nextState) {
    return !fromJS(nextProps).equals(fromJS(this.props)) || !fromJS(nextState).equals(fromJS(this.state));
  }

  getDefaultStyle(styleName, objectPropState)  {
    return defaultComponentStyle(styleName, objectPropState);
  }

  cellClick(e) {
    const month = e.target.innerHTML;
    if (this.checkIfMonthDisabled(month)) return;

    const date = this.props.dateVal.clone().month(month);
    this.props.cbPrevView(date);
  }

  checkIfMonthDisabled(month) {
    const now = this.props.dateVal;
    return now.clone().month(month).endOf('month').isBefore(this.props.minDate, 'day') ||
      now.clone().month(month).startOf('month').isAfter(this.props.maxDate, 'day');
  }

  getMonth() {
    const month = this.props.dateVal.month();
    return moment.monthsShort().map((item, i) => {
      return {
        label: item,
        disabled: this.checkIfMonthDisabled(i),
        curr: i === month
      };
    });
  }

  next() {
    let nextDate = this.props.dateVal.clone().add(1, 'years');
    if (this.props.maxDate && nextDate.isAfter(this.props.maxDate, 'day')) {
      nextDate = this.props.maxDate;
    }
    this.props.cbSetDate(nextDate);
  }

  prev() {
    let prevDate = this.props.dateVal.clone().subtract(1, 'years');
    if (this.props.minDate && prevDate.isBefore(this.props.minDate, 'day')) {
      prevDate = this.props.minDate;
    }
    this.props.cbSetDate(prevDate);
  }

  handleTitleClick(type){
    switch(type) {
      case 'previous':
        this.prev();
        break;
      case 'title':
        this.props.cbNextView();
        break;
      case 'next':
        this.next();
        break;
    }
  }

  monthsOnKeyPress(e){
    if(e.charCode == '13') {
      this.cellClick(e);
    }
  }

  prefetchStyles(){
    this.month = this.getStyle('month');
    this.viewHeader = this.getStyle('viewHeader');
    this.monthWrapper = this.getStyle('monthWrapper');
  }

  render() {
    let months = this.getMonth().map((item, i) => {
      return (
        <Cell
            key={i}
            label={item.label}
            dateVal={item.label}
            compStyle={{ cellWrapper : {...this.month}}}
        />);
    });

    return (
      <div
          className="months-view"
      >
          <ViewHeader
              key="ViewHeader - Month"
              headerData={this.props.dateVal.format('YYYY')}
              cbHeaderClick={this.handleTitleClick}
              compStyle={this.viewHeader}
          />
          <div
              className="months"
              onClick={this.cellClick}
              tabIndex={0}
              onKeyPress={this.monthsOnKeyPress}
              style={this.monthWrapper}
          >
              {months}
          </div>
      </div>
    );
  }
}

export default MonthView;
