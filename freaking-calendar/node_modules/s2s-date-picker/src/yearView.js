import React from 'react';
import S2SBaseComponent from 's2s-base-class';
import { fromJS } from 'immutable';
import moment from 'moment';
import 'moment-range';
import Cell from './cell';
import ViewHeader from './viewHeader';
import defaultComponentStyle from "./styles.js";

class YearView extends S2SBaseComponent {
  constructor(props){
      super(props);
      this.displayName = 'YearView';
      this.state = { dateVal: this.props.dateVal };

      this.handleTitleClick = this.handleTitleClick.bind(this);
      this.cellClick =  this.cellClick.bind(this);
      this.prev = this.prev.bind(this);
      this.next = this.next.bind(this);
      this.getYears = this.getYears.bind(this);
      this.checkIfYearDisabled = this.checkIfYearDisabled.bind(this);
      this.yearsOnKeyPress = this.yearsOnKeyPress.bind(this);
      this.moment = moment();

      this.prefetchStyles();
  }

  static propTypes = {
    cbPrevView : React.PropTypes.func,
    cbSetDate : React.PropTypes.func,
    compStyle: React.PropTypes.object,
    dateVal: React.PropTypes.object.isRequired,
    maxDate: React.PropTypes.object, // moment date object
    minDate: React.PropTypes.object // moment date object
  };

  static defaultProps = {
    cbPrevView : ()=>{ console.log('Please provide a callback function for cbPrevView');},
    cbSetDate : ()=>{ console.log('Please provide a callback function for cbSetDate');},
    dateVal : {},
    minDate : moment().add(-10000, 'years'),
    maxDate : moment().add(10000, 'years')
  };

  componentWillMount() {
    this.getYears();
  }

  componentWillReceiveProps(nextProps) {
    if(nextProps.hasOwnProperty('dateVal')) {
      this.setState({...this.state, dateVal : nextProps.dateVal });
    }
  }

  shouldComponentUpdate(nextProps, nextState) {
    return !fromJS(nextProps).equals(fromJS(this.props)) || !fromJS(nextState).equals(fromJS(this.state));
  }

  getDefaultStyle(styleName, objectPropState)  {
    return defaultComponentStyle(styleName, objectPropState);
  }

  cellClick(e){
    const year = parseInt(e.target.innerHTML, 10);
    const date = this.state.dateVal.clone().year(year);
    if (this.checkIfYearDisabled(date)) return;
    this.props.cbPrevView(date);
  }

  checkIfYearDisabled (year) {
    return year.clone().endOf('year').isBefore(this.props.minDate, 'day') ||
      year.clone().startOf('year').isAfter(this.props.maxDate, 'day');
  }

  getYears() {
    let now = this.state.dateVal; // TODO: fix bad variable name
    let start = now.clone().subtract(5, 'year');
    let end = now.clone().add(6, 'year');
    let currYear = now.year();
    let items = [];

    this.moment
      .range(start, end)
      .by('years', year => {

        items.push({
          label: year.format('YYYY'),
          disabled: this.checkIfYearDisabled(year),
          curr: currYear === year.year()
        });
      });

    return items;
  }

  next(){
    let nextDate = this.state.dateVal.clone().add(10, 'years');
    if (this.props.maxDate && nextDate.isAfter(this.props.maxDate, 'day')) {
      nextDate = this.props.maxDate;
    }
    this.props.cbSetDate(nextDate);
  }

  prev(){
    let prevDate = this.state.dateVal.clone().subtract(10, 'years');
    if (this.props.minDate && prevDate.isBefore(this.props.minDate, 'day')) {

      prevDate = this.props.minDate;
    }
    this.props.cbSetDate(prevDate);
  }

  handleTitleClick(type){
    switch(type) {
      case 'previous':
        this.prev();
        break;
      case 'next':
        this.next();
        break;
    }
  }

  yearsOnKeyPress(e){
    if(e.charCode == '13') {
      this.cellClick(e);
    }
  }

  prefetchStyles(){
    this.yearStyles = this.getStyle('year');
    this.viewHeaderYearView = this.getStyle('viewHeaderYearView');
    this.yearWrapper = this.getStyle('yearWrapper');
  }

  render() {
    const years = this.getYears();
    const currentDate = [years[0].label, years[years.length-1].label].join('-');

    let yearsCells = years.map((item, i) => {
      return (
        <Cell
            dateVal={item.label}
            key={i}
            compStyle={{ cellWrapper : {...this.yearStyles }}}
        />
      );
    });


    return (
      <div className="years-view">
        <ViewHeader
            compStyle={this.viewHeaderYearView}
            cbHeaderClick={this.handleTitleClick}
            headerData={currentDate}
        />
        <div
            className="years"
            onClick={this.cellClick}
            style={this.yearWrapper}
            onKeyPress={this.yearsOnKeyPress}
        >
            {yearsCells}
        </div>
      </div>
    );
  }
}

export default YearView;
