import React from 'react';
import S2SBaseComponent from 's2s-base-class';
import { fromJS } from 'immutable';
import defaultComponentStyle from "./styles.js";

// Cell is an area that has a value

class Cell extends S2SBaseComponent {
  constructor(props){
      super(props);
      this.displayName = 'Cell';
      this.state = { onHover: false };

      this.toggleHoverState = this.toggleHoverState.bind(this);

      this.prefetchStyles();
  }

  static propTypes = {
    classes : React.PropTypes.string,
    compStyle : React.PropTypes.object,
    dateVal : React.PropTypes.oneOfType([
        React.PropTypes.string,
        React.PropTypes.number
      ]).isRequired,
    isSelected : React.PropTypes.bool
  };

  static defaultProps = {
    classes : undefined,
    isSelected : false
  };

  static filename = 'cell.js';

  static displayName = 'Cell';

  static thumbnail = '';

  shouldComponentUpdate(nextProps, nextState) {
    return !fromJS(nextProps).equals(fromJS(this.props)) || !fromJS(nextState).equals(fromJS(this.state));
  }

  getDefaultStyle(styleName, objectPropState)  {
    return defaultComponentStyle(styleName, objectPropState);
  }

  toggleHoverState(){
    if(this.state.onHover){
      this.setState({...this.state, onHover : false });
    } else if (!this.state.onHover){
      this.setState({...this.state, onHover : true });
    }
  }

  prefetchStyles(){
    this.cellWrapper = this.getStyle('cellWrapper');
    this.cellHoverStyle = this.getStyle('cellHoverStyle');
    this.isSelected = this.getStyle('isSelected');
  }

  render(){

    let style;
    if(this.state.onHover == true) {
      style = {...this.cellWrapper, ...this.cellHoverStyle};
    } else {
      style = this.cellWrapper;
    }

    return(
      <div
          className={this.props.classes}
          style={this.props.isSelected ? {...style, ...this.isSelected }: style}
          tabIndex={0}
          label={this.props.dateVal}
          onMouseOver={this.toggleHoverState}
          onMouseOut={this.toggleHoverState}
      >
          {this.props.dateVal}
      </div>
    );
  }
}

export default Cell;
