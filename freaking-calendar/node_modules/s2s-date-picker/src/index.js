import React from 'react';
import S2SBaseComponent from 's2s-base-class';
import { fromJS } from 'immutable';
import TimeView from './timeView';
import moment from 'moment';
import Calendar from './calendar';
import Input from 's2s-input';

import 'moment-range';
import 'moment/locale/da';
import 'moment/locale/de';
import 'moment/locale/es';
import 'moment/locale/fr';
import 'moment/locale/id';
import 'moment/locale/it';
import 'moment/locale/pl';
import 'moment/locale/pt';
import 'moment/locale/ru';
import 'moment/locale/sv';
import 'moment/locale/zh-cn';
import defaultComponentStyle from "./styles.js";

var momentLocale;
var isTwelveHour;


class DatePicker extends S2SBaseComponent {
  constructor(props){
      super(props);
      this.displayName = 'DatePicker';
      this.state = {
        dropDownDisplayed : false, // drop down visibility
        calendarDisplayed : true , // button styles relevant to calendar, displays calendar in dropdown
        timeDisplayed : false, // button styles relevant to time, displays time in dropdown
        timestamp : this.props.timestamp,
        hourValue : moment(this.props.timestamp).format('HH'), // NOTE: 24hour based
        minuteValue : moment(this.props.timestamp).format('mm'),
        onDateHover : undefined,
        onTimeHover : undefined
      };

      // Setting locale
      momentLocale = this.props.locale;
      if(this.props.intl){
        if(this.props.intl.locale == "zh"){
          momentLocale = "zh-cn";
        } else{
          momentLocale = this.props.intl.locale;
        }
      }
      moment.locale(momentLocale);


      isTwelveHour = this.props.isTwelveHour;
      // if a locale is specified determine isTwelveHour formatting based on THAT. Disregard isTwelveHour prop.
      if(this.props.dateTimeFormat.indexOf('LT') !== -1){
          const LT = moment.localeData(momentLocale)._longDateFormat.LT;
          const LTS = moment.localeData(momentLocale)._longDateFormat.LTS;

          if(LT.charAt(0) == 'h' || LTS.charAt(0) == 'h') {
            isTwelveHour = true;
          } else {
            isTwelveHour = false;
          }
      }

      // Getting formats for input value and CalendarButton
      const hIndex = this.props.dateTimeFormat.indexOf('H') != -1 ? this.props.dateTimeFormat.indexOf('H') - 1 : this.props.dateTimeFormat.indexOf('h') -1;
      this.dateFormat = this.props.displayTime == true ? this.props.dateTimeFormat.slice(0,  hIndex) : this.props.dateTimeFormat; // The date format only.
      this.inputFormat = this.props.dateTimeFormat; // The whole date format including time (if provided)


      // Alerting user that their values for the displayTime and dateTimeFormat are conflicting
      const colonExists = moment(this.props.timestamp).format(this.inputFormat).indexOf(':') !== -1;
      if(colonExists && this.props.displayTime == false) {
        console.warn('Time has been provided for dateTimeFormat and displayTime is false. Please note that time will only be editable via the input area. ');
      }

      this.handleChangeStartTime = this.handleChangeStartTime.bind(this);
      this.handleInputChange = this.handleInputChange.bind(this);
      this.handleTimeChange = this.handleTimeChange.bind(this);
      this.getTimeBtnLabel = this.getTimeBtnLabel.bind(this);
      this.getDateBtnLabel = this.getDateBtnLabel.bind(this);
      this.getDisplayedHourValue = this.getDisplayedHourValue.bind(this);
      this.getDisplayedAmpm = this.getDisplayedAmpm.bind(this);
      this.dropDownToggle = this.dropDownToggle.bind(this);
      // this.calendarTimeToggle = this.calendarTimeToggle.bind(this);
      this.handleInputBlur = this.handleInputBlur.bind(this);
      this.handleInputOnEnter = this.handleInputOnEnter.bind(this);
      this.calendarToggle = this.calendarToggle.bind(this);
      this.timeToggle = this.timeToggle.bind(this);
      this.handleMouseEnterTime = this.handleMouseEnterTime.bind(this);
      this.handleMouseLeaveTime = this.handleMouseLeaveTime.bind(this);
      this.handleMouseEnterDate = this.handleMouseEnterDate.bind(this);
      this.handleMouseLeaveDate = this.handleMouseLeaveDate.bind(this);

      this.prefetchStyles();

  }

  static propTypes = {
    cbSelectDate : React.PropTypes.func,
    compStyle : React.PropTypes.object,
    dateTimeFormat : React.PropTypes.string,
    disabled : React.PropTypes.bool,
    displayTime : React.PropTypes.bool,
    isTwelveHour : React.PropTypes.bool,
    locale : React.PropTypes.string,
    maxDate: React.PropTypes.object,
    minDate: React.PropTypes.object,
    placeholder : React.PropTypes.string,
    timestamp : React.PropTypes.number
  };

  static defaultProps = {
    cbSelectDate : ()=>{ console.log('Please provide a callback function for cbSelectDate'); },
    dateTimeFormat : 'YYYY-MM-DD hh:mm a',
    disabled : false,
    displayTime : true,
    isTwelveHour : true,
    locale : 'en',
    placeholder : 'Please enter a date',
    timestamp : Date.now()
  };

  static filename = 's2s-date-picker.js';

  static displayName = 'DatePicker';

  static thumbnail = '';

  // Getter function that returns a timestamp
  get value(){
    return this.state.timestamp;
  }

  componentWillReceiveProps(nextProps){
    if(nextProps.hasOwnProperty('dateTimeFormat')) {
      this.inputFormat = nextProps.dateTimeFormat;
    }
  }

  shouldComponentUpdate(nextProps, nextState) {
    return !fromJS(nextProps).equals(fromJS(this.props)) || !fromJS(nextState).equals(fromJS(this.state));
  }

  getDefaultStyle(styleName, objectPropState)  {
    return defaultComponentStyle(styleName, objectPropState);
  }

  // Function that is invoked whenever CalendarView has changed.
  // It sets state for timestamp and passes the new timestamp in as an argument for cbSelectDate
  handleChangeStartTime(newDate){
    //console.log('handleChangeStartTime arguments :', newDate);
    const updatedTimestamp = moment(newDate).set({hour: this.state.hourValue, minute: this.state.minuteValue, millisecond: 0}).valueOf();
    this.setState({...this.state, timestamp: updatedTimestamp });

    this.props.cbSelectDate(updatedTimestamp);
  }

  // Function that handles 24hr time and sets state for hourValue, minuteValue, and timestamp.
  // This function is invoked anytime the input has changed in TimeView.
  handleTimeChange(hour, minute, ampm) {
    //console.log('handleTimeChange arguments :', hour, minute, ampm);
    // update time with values from timeView
    let newHour;
    let newMinute;

    // set the hour
    if ( isTwelveHour === true  ){ // NOTE
      // need to convert to 24 hour format
      if (Number(hour) === 12 && ampm == 'am') {
        newHour = 0;
      } else if( Number(hour) < 12 && ampm == 'pm') {
        newHour = Number(hour) + 12;
      } else {
        newHour = Number(hour);
      }
    } else {
      // 24 hour time format
      newHour = Number(hour);
    }

    // set minutes
    newMinute = minute;

    // set the values in state...
    const newTimestamp = moment(this.state.timestamp).set({hour: newHour, minute: newMinute}).valueOf();
    this.setState({ ...this.state,  hourValue: newHour, minuteValue: newMinute, timestamp: newTimestamp });

  }

  // Function that will validate the value provided in input.
  // User input must match the format that has been set.
  handleInputChange(inputValue){
    //console.log('handleInputChange argument:', inputValue);

    if (moment(inputValue,this.props.dateTimeFormat).isValid()) {
      const startTimestamp = moment(inputValue,this.props.dateTimeFormat).valueOf();
      const newHour = moment(startTimestamp).format('HH');
      const newMinute = moment(startTimestamp).format('mm');

      this.setState({...this.state, timestamp: startTimestamp, hourValue: newHour, minuteValue: newMinute});
    } else {
      // users input does not match
      console.error('The value you provided : ' + inputValue + ' is not valid.');
    }

  }

  // Function that returns a string that represents the hour that can be seen
  // on the TimeView Button and TimeView component.
  getDisplayedHourValue() {
    let hour;

    const convertToTwelveHour = () => {
      if (this.state.hourValue == 0) { // NOTE: hourValue is 24hr based
        return 12;
      } else if ( this.state.hourValue > 12){
        return this.state.hourValue - 12;
      } else {
        return this.state.hourValue;
      }
    };

    if (isTwelveHour) {
      hour = convertToTwelveHour();
    } else {
      hour = this.state.hourValue;
    }

    const padHour = '0' + hour;
    return padHour.substring(padHour.length-2);
  }

  // Function that returns a string that represents the ampm value that can be seen
  // on the TimeView Button and TimeView component.
  getDisplayedAmpm() {
    let ampmValue = '';

    if (isTwelveHour) { // NOTE
      if (this.state.hourValue < 12) { // NOTE: hourValue is 24hr based
        ampmValue = 'am';
      } else {
        ampmValue = 'pm';
      }
    }
    // if not twelvehour time, return empty string
    return ampmValue;
  }

  // Function that returns a string that represents the time value that can be seen
  // on the TimeView Button.
  getTimeBtnLabel() {
    return this.getDisplayedHourValue() + ':' + this.state.minuteValue + ' ' + this.getDisplayedAmpm();
  }

  // Function that returns a string that represents the date value that can be seen
  // on the CalendarView Button.
  getDateBtnLabel() {
    return moment(this.state.timestamp).format(this.dateFormat);
  }

  dropDownToggle(){
    // if this.state.dropDownDisplayed is true, then callback with value to parent (and close the dropdown)
    if (this.state.dropDownDisplayed == true) {
      this.props.cbSelectDate(this.state.timestamp);
    }
    this.setState({...this.state, dropDownDisplayed : !this.state.dropDownDisplayed });
  }

  calendarToggle(){
    if (!this.state.calendarDisplayed ) {
      this.setState({...this.state, calendarDisplayed : true, timeDisplayed : false });
    }
  }

  timeToggle(){
    if (!this.state.timeDisplayed ) {
      this.setState({...this.state, calendarDisplayed : false, timeDisplayed : true });
    }
  }

  handleMouseEnterDate() {
    this.setState({...this.state, 'onDateHover': true});
  }

  handleMouseEnterTime() {
    this.setState({...this.state, 'onTimeHover': true});
  }

  handleMouseLeaveDate() {
    this.setState({...this.state, 'onDateHover': false});
  }

  handleMouseLeaveTime() {
    this.setState({...this.state, 'onTimeHover': false});
  }

  handleInputBlur(e){
    this.handleInputChange(e.target.value);
  }

  handleInputOnEnter(v){
    this.handleInputChange(v);
  }


  prefetchStyles(){
    this.dropdownWrapper = this.getStyle('dropdownWrapper');
    this.datePicker = this.getStyle('datePicker');
    this.topContainer = this.getStyle('topContainer');
    this.inputStyle = this.getStyle('inputStyle');
    this.positionedButtonsWrapper = this.props.displayTime ? {...this.getStyle('positionedButtonsWrapper'), paddingRight: '0px'} : {...this.getStyle('positionedButtonsWrapper'), paddingRight: '100px'};
    this.dateButton = this.getStyle('dateButton');
    this.dateButtonActive = this.getStyle('dateButtonActive');
    this.dateButtonHover = this.getStyle('dateButtonHover');
    this.timeButton = this.getStyle('timeButton');
    this.timeButtonActive = this.getStyle('timeButtonActive');
    this.timeButtonHover = this.getStyle('timeButtonHover');

  }

  render(){

    let positionedButtonsStyle;
    if(this.state.dropDownDisplayed) {
      positionedButtonsStyle = {...this.positionedButtonsWrapper, display : 'flex', top: '7px'};
    } else {
      positionedButtonsStyle = {...this.positionedButtonsWrapper, display: 'none', top: '-1000px'};
    }

    let dateButtonStyles;
      if(this.state.calendarDisplayed) {
        dateButtonStyles = this.dateButtonActive;
      } else if (this.state.onDateHover){
        dateButtonStyles = this.dateButtonHover;
      } else {
        dateButtonStyles = this.dateButton;
      }

    let timeButtonStyles;
      if(this.state.timeDisplayed ) {
        timeButtonStyles = this.timeButtonActive;
      } else if (this.state.onTimeHover){
        timeButtonStyles = this.timeButtonHover;
      } else {
        timeButtonStyles = this.timeButton;
      }

    let inputStyles;
    if(this.state.dropDownDisplayed) {
      if(this.state.calendarDisplayed) {
        inputStyles = {...this.inputStyle,
          svgArea: {
            backgroundColor: '#228ae6',
            border: '1px solid #228ae6'
          },
          noSVGArea: {
            fill: "#f8f9fa"
          },
          svgStyle: {
            fill: "#f8f9fa"
          },
          svgStyleWithHover: {
            fill: '#f8f9fa'
          }
        };
      } else {
        inputStyles = {...this.inputStyle,
          svgArea: {
            backgroundColor: '#228ae6',
            border: '1px solid #228ae6'
          },
          noSVGArea: {
            fill: "#f8f9fa"
          },
          svgStyle: {
            fill: "#f8f9fa"
          },
          svgStyleWithHover: {
            fill: '#212529'
          }
        };
      }
    } else {
        inputStyles = {...this.inputStyle,
          svgArea: {
            backgroundColor: undefined,
            border: '1px solid #dee2e6'
          },
          noSVGArea: {
            fill: "#212529"
          },
          svgStyle: {
            fill: "#212529"
          }
        };
      }

    // let dateButtonStyles = this.state.calendarDisplayed  ? {
    //   ...this.dateButton,
    //   buttonStyles: {...this.dateButton.buttonStyles, backgroundColor: '#228ae6'},
    //   labelStyles : {...this.dateButton.labelStyles, color: '#f8f9fa'},
    //   hoverButtonStyles : {...this.dateButton.hoverButtonStyles, backgroundColor: '#228ae6'}
    // } :
    // {
    //   ...this.dateButton,
    //   buttonStyles: {...this.dateButton.buttonStyles, backgroundColor: '#f8f9fa'},
    //   labelStyles : {...this.dateButton.labelStyles, color: '#212529'},
    //   hoverButtonStyles : {...this.dateButton.hoverButtonStyles, backgroundColor: '#e9ecef'}
    // };
    //
    // let timeButtonStyles = this.state.calendarDisplayed ? {
    //   ...this.timeButtonStyle,
    //   buttonStyles: {...this.timeButton.buttonStyles, backgroundColor: '#228ae6'},
    //   labelStyles : {...this.timeButton.labelStyles, color: '#f8f9fa'},
    //   hoverButtonStyles : {...this.timeButton.hoverButtonStyles, backgroundColor: '#228ae6'}
    // } :
    // {
    //   ...this.timeButtonStyle,
    //   buttonStyles: {...this.timeButton.buttonStyles, backgroundColor: '#f8f9fa'},
    //   labelStyles : {...this.timeButton.labelStyles, color: '#212529'},
    //   hoverButtonStyles : {...this.timeButton.hoverButtonStyles, backgroundColor: '#e9ecef'}
    // };

    // timeView will return either TimeView component or undefined based on displayTime prop
    const timeView = this.props.disabled ? undefined : (
      <div style={this.dropdownWrapper}>
        <TimeView
            hour={this.getDisplayedHourValue()}
            minute={this.state.minuteValue}
            ampm={this.getDisplayedAmpm()}
            cbInputChange={this.handleTimeChange}
            isTwelveHour={isTwelveHour}
            locale={momentLocale}
        />
      </div>
    );

    // calendarView will return Calendar component
    const calendarView = this.props.disabled ? undefined : (
      <div style={this.dropdownWrapper}>
        <Calendar
            key="Calendar"
            isDisplayed={this.state.calendarDisplayed}
            timestamp={this.state.timestamp}
            //disabled={this.props.disabled}
            minDate={this.props.minDate}
            maxDate={this.props.maxDate}
            cbSetDate={this.handleChangeStartTime}
            cbChange={this.handleChangeStartTime}
        />
      </div>
    );

    let dropDownView = undefined;

    const timeBtnLabel = this.getTimeBtnLabel();
    const dateBtnLabel = this.getDateBtnLabel();


    switch(this.state.dropDownDisplayed == true) {
      case true:
        if(this.state.calendarDisplayed == true) {
          dropDownView = calendarView;
        } else {
          dropDownView = timeView;
        }
      break;
    }

    return(
      <div
          className="datePicker"
          style={this.datePicker}
      >
        <div
            className="topContainer"
            style={this.topContainer}
        >
            <Input
                hasSVG
                svgOverride="CalendarIconSVG"
                cbIconClick={this.dropDownToggle}
                compStyle={inputStyles}
                value={moment(this.state.timestamp).format(this.inputFormat)}
                placeholder={this.props.placeholder}
                cbOnBlur={this.handleInputBlur}
                cbOnEnter={this.handleInputOnEnter}
           />
          <div
              className="positionedButtonsWrapper"
              style={positionedButtonsStyle}
          >
            <button
                style={dateButtonStyles}
                aria-label="view date drop down"
                onClick={this.calendarToggle}
                onMouseOver = {this.handleMouseEnterDate}
                onMouseOut = {this.handleMouseLeaveDate}
            >
              {dateBtnLabel}
            </button>
              {
                this.props.displayTime ?  (
                  <button
                      style={timeButtonStyles}
                      aria-label="view time drop down"
                      onClick={this.timeToggle}
                      onMouseOver = {this.handleMouseEnterTime}
                      onMouseOut = {this.handleMouseLeaveTime}
                  >
                    {timeBtnLabel}
                  </button>
               ) : undefined
             }
           </div>
       </div>
        {dropDownView}
      </div>
    );
  }
}

export default DatePicker;
