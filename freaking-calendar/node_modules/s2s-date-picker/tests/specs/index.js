import React from "react";
//import your component here
import DatePicker from "../../src/index.js"
import moment from '../../node_modules/moment'



describe("DatePicker", function() {
  function afunc(type){
    switch(type) {
      case 'previous':
        console.log('previous clicked');
        break;
      case 'title':
        console.log('title clicked');
        break;
      case 'next':
        console.log('next clicked');
        break;
    }
    alert('button clicked');
  }


  before(() => {
    this.component(
      <div style ={{width:'375px'}}>
        <DatePicker
            ref="dp"
            cbChange={(a)=>{ console.log('new timestamp: ', a);}}
            isTwelveHour={false}
            buttonType="reset"
            buttonLabel="Thomas bar"
            disabled={false}
            format={'MM/DD/YYYY HH:mm'}
            cbSelectDate={(date)=>{
              console.log('cbSelectDate argument: ', date,  'date formatted',moment(date).format('MM-DD-YYYY HH:mm'));
          }}
        />
      </div>
    );
  });


  section("dateTimeFormat", function(){
    it("MM/DD/YYYY hh:mm a (default)", () => {
      this.component(
        <DatePicker
            timestamp={Date.now()}
        /> );
    });

    it("MM/DD/YYYY", () => {
      this.component(
        <DatePicker
            timestamp={Date.now()}
            dateTimeFormat="MM/DD/YYYY"
        /> );
    });

    it("MMMM DD, YYYY", () => {
      this.component(
        <DatePicker
            timestamp={Date.now()}
            dateTimeFormat="MMMM DD, YYYY"
        /> );
    });

    it("MM-DD-YY HH:mm", () => {
      this.component(
        <DatePicker
            timestamp={Date.now()}
            dateTimeFormat="MM-DD-YY HH:mm"
        />
      );
    });

    it("L LT", () => {
      this.component(
        <DatePicker
            timestamp={Date.now()}
            dateTimeFormat="L LT"
        />
      );
    });
  });

  section("cbSelectDate", function(){
    it("Invokes cbSetDate function", () => {
      this.component(
        <DatePicker
            minDate={moment(Date.now())}
            cbSelectDate={(date)=>{
              console.log('cbSelectDate clicked: ', moment(date).format('MM-DD-YYYY HH:mm'));
            }}
        />
      );
    });
  });

  section("timestamp", function(){
    it("Default", () => {
      this.component(
        <DatePicker
            minDate={moment(Date.now())}
        />
      );
    });

    it("Jan 18, 2017", () => {
      this.component(
        <DatePicker
            minDate={moment(Date.now())}
            timestamp={1484776859184}
        />
      );
    });
  });

  section("minDate", function(){
    it("Default", () => {
      this.component(
        <DatePicker
            minDate={moment(Date.now())}
        />
      );
    });

    it("Jan 18, 2017", () => {
      this.component(
        <DatePicker
            minDate={moment(1484776859184)}
        />
      );
    });
  });

  section("disabled", function(){
    it("Default", () => {
      this.component(
        <DatePicker
          //minDate={moment(Date.now())}
        /> );
    });

    it("True", () => {
      this.component(
        <DatePicker
            disabled
        />
      );
    });

    it("False", () => {
      this.component(
        <DatePicker
            disabled={false}
        />
      );
    });
  });

  section("maxDate", function(){
    it("Default", () => {
      this.component(
        <DatePicker
          //maxDate={moment(Date.now())}
        />
      );
    });

    it("Jan 18, 2017", () => {
      this.component(
        <DatePicker
            maxDate={moment(1484776859184)}
        />
      );
    });
  });
  section("placeholder", function(){
    it("Default", () => {
      this.component(
        <DatePicker
            minDate={moment(Date.now())}
        />
      );
    });
    it("MM/DD/YYYY HH:mm", () => {
      this.component(
        <DatePicker
          placeholder="MM/DD/YYYY HH:mm"
          dateTimeFormat="MM/DD/YYYY HH:mm"
          minDate={moment(Date.now())}
        /> );
    });

  });

  section("isTwelveHour", function(){
    it("Default", () => {
      this.component(
        <DatePicker
          isTwelveHour={true}
          minDate={moment(Date.now())}
        /> );
    });

    it("True ", () => {
      this.component(
        <DatePicker
            isTwelveHour={true}
            dateTimeFormat="MM/DD/YYYY HH:mm"
            minDate={moment(Date.now())}
        /> );
    });
    it("False ", () => {
      this.component(
        <DatePicker
          isTwelveHour={false}
          dateTimeFormat="MM/DD/YYYY HH:mm"
          minDate={moment(Date.now())}

        /> );
    });

  });

  section("displayTime", function(){
  // NOTE: Will show or hide TimeView Button and TimeView Dropdown based on displayTime prop
  // NOTE: If you specify time in your dateTimeFormat prop, it WILL display. This prop will only
  // control the visibility of the TimeView Button and TimeView Dropdown.

    it("True (default) ", () => {
      this.component(
        <DatePicker
            displayTime
            minDate={moment(Date.now())}
            cbSelectDate={(date)=>{
              console.log('date formatted : ',moment(date).format('L LT'));
            }}
        /> );
    });

    it("False ", () => {
      this.component(
        <DatePicker
            displayTime={false}
            minDate={moment(Date.now())}
            dateTimeFormat='MM/DD/YYYY'
            cbSelectDate={(date)=>{
              console.log('date formatted : ',moment(date).format('L'));
          }}
        /> );
    });


    // NOTE : Shows a warning in the console because time is specified in the dateTimeFormat but user provided false for displayTime.
    // This is fine and DatePicker will still work. Just should be aware that TimeView Button and Dropdown will not be available.
    it("False ", () => {
      this.component(
        <DatePicker
            displayTime={false}
            minDate={moment(Date.now())}
            dateTimeFormat="MM/DD/YYYY hh:mm"
            cbSelectDate={(date)=>{
              console.log('date formatted : ',moment(date).format('L LT'));
          }}
        /> );
    });

  });

  section("locale", function(){
    // NOTE: Will customize the date/time format to be displayed based on the locale format that is passed in.
    it("English", () => {
      this.component(
        <DatePicker
          displayTime={false}
          minDate={moment(Date.now())}
          dateTimeFormat='L' // NOTE: Providing a locale alone does nothing, must also provide a dateTimeFormat string.
          locale="en"
          cbSelectDate={(date)=>{
            console.log('date formatted : ',moment(date).format('L'));
          }}
        /> );
    });

    it("English with Time", () => {
      this.component(
        <DatePicker
          displayTime={false}
          minDate={moment(Date.now())}
          dateTimeFormat='L LT' // NOTE: Providing a locale alone does nothing, must also provide a dateTimeFormat string.
          locale="en"
          cbSelectDate={(date)=>{
            console.log('date formatted : ',moment(date).format('L'));
          }}
        /> );
    });

    it("French", () => {
      this.component(
        <DatePicker
          displayTime={false}
          minDate={moment(Date.now())}
          dateTimeFormat='L'
          locale="fr"
          cbSelectDate={(date)=>{
            console.log('date formatted : ',moment(date).format('L'));
          }}
        /> );
    });

    it("French Locale with Time", () => {
      this.component(
        <DatePicker
          displayTime={true}
          isTwelveHour={false}
          minDate={moment(Date.now())}
          dateTimeFormat='L LT'
          locale="fr"
          cbSelectDate={(date)=>{
            console.log('date formatted : ',moment(date).format('L LT'));
          }}
        /> );
    });


    it("Spanish Locale ", () => {
      this.component(
        <DatePicker
            displayTime={false}
            isTwelveHour={true}
            minDate={moment(Date.now())}
            dateTimeFormat='L'
            locale="es"
            cbSelectDate={(date)=>{
              console.log(
              'date formatted',moment(date).format('L LT'));
            }}
        /> );
    });

    it("Spanish Locale with Time", () => {
      this.component(
        <DatePicker
            displayTime={true}
            isTwelveHour={true}
            minDate={moment(Date.now())}
            dateTimeFormat='L LT'
            locale="es"
            cbSelectDate={(date)=>{
              console.log(
              'date formatted',moment(date).format('L LT'));
            }}
        /> );
    });

  })

  section("Locales VS isTwelveHour issue", function(){
    // NOTE: Having a localized format and isTwelveHour value can sometimes conflict. The localized dateTimeFormat will trump isTwelveHour prop.
    it("French Locale ", () => {
      this.component(
        <DatePicker
          displayTime={true}
          isTwelveHour={true} // NOTE: French locale is twentyfour hours by default
          minDate={moment(Date.now())}
          dateTimeFormat='L LT' // Localized dateTimeFormat string
          locale="fr"
          cbSelectDate={(date)=>{
            console.log('date formatted : ',moment(date).format('L'));
          }}
        /> );
    });

    it("English Locale ", () => {
      this.component(
        <DatePicker
            displayTime={true}
            isTwelveHour={false} // NOTE: English locale is Twelve Hour by default
            minDate={moment(Date.now())}
            dateTimeFormat='L LT' // Localized dateTimeFormat string
            locale="en"
            cbSelectDate={(date)=>{
              console.log(
              'date formatted',moment(date).format('L LT'));
            }}
        /> );
    });
  })

});
