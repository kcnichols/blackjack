import React from 'react';
import Calendar from '../src/calendar.js';
import { shallow, mount } from 'enzyme';
import sinon from 'sinon';
// jest.unmock('../src/cell.js');
// jest.unmock('../src/dayView.js');
// jest.unmock('../src/monthView.js');
// jest.unmock('../src/yearView.js');
// jest.unmock('../src/viewHeader.js');

describe('Calendar Component', ()=>{

  it('rerenders when props have changed', () => {
    const spy = sinon.spy(Calendar.prototype, "render");

    const wrapper = shallow(<Calendar isDisplayed />);

    // render is always called once so before setting any props check that it was called once.
    expect(spy.calledOnce).toEqual(true);

    // After setting props check to see if render has been called twice (initial render and render after props have changed)
    wrapper.setProps({ isDisplayed : false });
    expect(spy.calledTwice).toEqual(true);

    // Now checking to see if render is called again even though props are the same. Should be false.
    wrapper.setProps({ isDisplayed : false });
    expect(spy.calledThrice).toEqual(false);
  });

  it('fires setDate', () => {
    var spy1 = sinon.spy(Calendar.prototype, "setDate");
    const spy2 = sinon.spy();

    const wrapper = mount(
      <Calendar
        isDisplayed
        cbChange={spy2}
      />);

    // DAY VIEW
    wrapper.setState({ currentView : 0 });
    wrapper.childAt(0).childAt(0).childAt(1).childAt(0).simulate('click');
    expect(spy1.calledOnce).toEqual(true);
    expect(spy2.calledOnce).toEqual(true);

    // MONTH VIEW
    wrapper.setState({ currentView : 1 });
    wrapper.childAt(0).childAt(0).childAt(1).childAt(0).simulate('click');
    expect(spy1.calledOnce).toEqual(true);
    expect(spy2.calledOnce).toEqual(true);


    // YEAR VIEW
    wrapper.setState({ currentView : 2 });
    //console.log('wrapper', wrapper.childAt(0).childAt(0).childAt(1).childAt(0).debug());
    wrapper.childAt(0).childAt(0).childAt(1).childAt(0).simulate('click');
    expect(spy1.calledOnce).toEqual(true);
    expect(spy2.calledOnce).toEqual(true);

  });

  it('fires nextView', () => {
    var spy1 = sinon.spy(Calendar.prototype, "nextView");
    const spy2 = sinon.spy();

    const wrapper = mount(
      <Calendar
          isDisplayed
          cbChange={spy2}
      />);

    // NEXTVIEW FUNCTION - DAY VIEW
    wrapper.setState({ currentView : 0 });
    wrapper.childAt(0).childAt(0).childAt(0).childAt(1).simulate('click'); // HOLY HELL
    expect(spy1.calledOnce).toEqual(true);
    expect(wrapper.state().currentView).toEqual(1);

    // NEXTVIEW FUNCTION - MONTH VIEW
    wrapper.setState({ currentView : 1 });
    wrapper.childAt(0).childAt(0).childAt(0).childAt(1).simulate('click'); // HOLY HELL
    //console.log('wrapper', wrapper.childAt(0).childAt(0).childAt(0).childAt(1).debug());
    expect(spy1.calledTwice).toEqual(true);
    expect(wrapper.state().currentView).toEqual(2);


  });

  it('fires prevView', () => {
    var spy1 = sinon.spy(Calendar.prototype, "prevView");
    const spy2 = sinon.spy();

    const wrapper = mount(
      <Calendar
          isDisplayed
          cbChange={spy2}
          //cbNextView={spy2}
      />);

    // MONTH VIEW
    wrapper.setState({ currentView : 1 });
    wrapper.childAt(0).find('.months').simulate('click');
    expect(spy1.calledOnce).toEqual(true);
    //expect(wrapper.state().currentView).toEqual(0);

    // YEAR VIEW
    wrapper.setState({ currentView : 2 });
    wrapper.childAt(0).find('.years').simulate('click');
    expect(spy1.calledTwice).toEqual(true);
    //expect(wrapper.state().currentView).toEqual(1);
  });


  it('displays calendar', () => {
    const wrapper = mount(
      <Calendar
        isDisplayed
        //cbChange={spy}
      />);

    wrapper.setProps({ isDisplayed : false, disabled : true });
    expect(wrapper.find('.input-calendar').children().length).toEqual(0);
    wrapper.setProps({ isDisplayed : true, disabled : false });
    //console.log('wrapper', wrapper.debug());
    //expect(wrapper.find('.input-calendar').children().length).toEqual(0);
  });

  // it('displays calendar', () => {
  //   const wrapper = mount(
  //     <Calendar
  //       isDisplayed
  //       //cbChange={spy}
  //     />);
  //
  //   wrapper.setProps({ isDisplayed : false, disabled : true });
  //   expect(wrapper.find('.input-calendar').children().length).toEqual(0);
  //   wrapper.setProps({ isDisplayed : true, disabled : false });
  //   //console.log('wrapper', wrapper.debug());
  //   //expect(wrapper.find('.input-calendar').children().length).toEqual(0);
  // });



});
