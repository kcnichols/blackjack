import React from 'react';
import TimeView from '../src/timeView.js';
import { shallow, mount} from 'enzyme';
import sinon from 'sinon';
jest.unmock('../src/timeView.js');



describe('TimeView Component', ()=>{

  it('rerenders when props have changed', () => {
    const spy = sinon.spy(TimeView.prototype, "render");

    const wrapper = shallow(
      <TimeView
          isTwelveHour
      />);

    // render is always called once so before setting any props check that it was called once.
    expect(spy.calledOnce).toEqual(true);

    // After setting props check to see if render has been called twice (initial render and render after props have changed)
    wrapper.setProps({ isTwelveHour: false });
    expect(spy.calledTwice).toEqual(true);

    // Now checking to see if render is called again even though props are the same. Should be false.
    wrapper.setProps({ isTwelveHour: false });
    expect(spy.calledThrice).toEqual(false);
  });

  it('renders an hour value', () => {
    const wrapper = shallow(
      <TimeView
          hour='11'
      />);

    //console.log('wrapper', wrapper.find('.hour').debug());
    expect(wrapper.find('.hour').props().value).toEqual('11');
  });

  it('renders an minute value', () => {
    const wrapper = shallow(
      <TimeView
          minute='11'
      />);

    //console.log('wrapper', wrapper.find('.minute').debug());
    expect(wrapper.find('.minute').props().value).toEqual('11');
  });

  it('renders an ampm value', () => {
    const wrapper = shallow(
      <TimeView
          minute='am'
      />);

    //console.log('wrapper', wrapper.debug());
    expect(wrapper.find('.am-pm').props().value).toEqual('am');
  });

  it('renders an ampm button', () => {
    const wrapper = shallow(
      <TimeView
          isTwelveHour={true}
      />);

    //console.log('wrapper', wrapper.find('.am-pm').debug());
    expect(wrapper.find('.am-pm').length).toEqual(1);
  });

  it('does NOT render an ampm button', () => {
    const wrapper = shallow(
      <TimeView
          isTwelveHour={false}
      />);

    //console.log('wrapper', wrapper.find('.am-pm').debug());
    expect(wrapper.find('.am-pm').length).toEqual(0);
  });

  it('fires hourOnFocus', () => {
    const spy1 = sinon.spy(TimeView.prototype, 'hourOnFocus');
    const wrapper = mount(
      <TimeView
          dateVal='Date Value'
      />);

    wrapper.find('.hour').simulate('focus');
    expect(spy1.calledOnce).toEqual(true);
    expect(wrapper.state().hourSelected).toEqual(true);
    expect(wrapper.state().inputWithFocus).toEqual('hour');
  });

  it('fires minuteOnFocus', () => {
    const spy1 = sinon.spy(TimeView.prototype, 'minuteOnFocus');
    const wrapper = mount(
      <TimeView
          dateVal='Date Value'
      />);

    wrapper.find('.minute').simulate('focus');
    expect(spy1.calledOnce).toEqual(true);
    expect(wrapper.state().hourSelected).toEqual(undefined); // NOTE: Should be false instead? Also should it be initialized in state?

  });

  it('fires ampmClick', () => {
    const spy = sinon.spy(TimeView.prototype, 'ampmClick');
    const spy1 = sinon.spy();
    const clock = sinon.useFakeTimers();
    const wrapper = mount(
      <TimeView
          isTwelveHour
          cbInputChange={spy1}
      />);

    wrapper.childAt(0).childAt(0).find('Button').simulate('click');
    expect(spy.calledOnce).toEqual(true);
    clock.tick(1010);
    expect(spy1.calledOnce).toEqual(true);
  });

  it('fires backOnClick', () => {
    const spy = sinon.spy(TimeView.prototype, 'backOnClick');
    const wrapper = mount(
      <TimeView
          isTwelveHour
          minute="32"
      />);
    wrapper.childAt(1).childAt(0).childAt(10).simulate('click');
    expect(spy.calledOnce).toEqual(true);
    expect(wrapper.state().hourValue).toEqual('1');
    wrapper.setState({ inputWithFocus : 'minute'});
    wrapper.childAt(1).childAt(0).childAt(10).simulate('click');
    expect(wrapper.state().minuteValue).toEqual('3');
  });

  it('fires handleInputChange', () => {
    const spy1 = sinon.spy(TimeView.prototype, 'handleInputChange');
    const spy2 = sinon.spy(TimeView.prototype, 'isTextSelected');
    const spy3 = sinon.spy();
    //const spy4 = sinon.spy(TimeView.prototype, 'changeTimer');
    const clock = sinon.useFakeTimers();
    const wrapper = mount(
      <TimeView
          dateVal='Date Value'
          cbInputChange={spy3}
      />);

    wrapper.find('.hour').simulate('change');
    expect(spy1.calledOnce).toEqual(true);
    expect(spy2.calledOnce).toEqual(true);
    clock.tick(2010);
    expect(spy3.calledOnce).toEqual(true);


    wrapper.setState({ inputWithFocus : 'hour', hourValue : 13 });
    wrapper.find('.hour').simulate('change');
    //console.log('wrapper', wrapper.state());
    clock.tick(2010);
    expect(spy3.calledOnce).toEqual(true);

    wrapper.setState({ inputWithFocus : 'minute', hourValue : 13 });
    wrapper.find('.hour').simulate('change');
    //console.log('wrapper', wrapper.state());
    clock.tick(2010);
    expect(spy3.calledOnce).toEqual(true);

    wrapper.setProps({ isTwelveHour : false });
    wrapper.setState({ inputWithFocus : 'hour', hourValue : 25 });
    wrapper.find('.hour').simulate('change');
    //console.log('wrapper', wrapper.state());
    clock.tick(2010);
    expect(spy3.calledOnce).toEqual(true);

    wrapper.setState({ inputWithFocus : 'minute', minuteValue : 61 });
    wrapper.find('.hour').simulate('change');
    //console.log('wrapper', wrapper.state());
    clock.tick(2010);
    expect(spy3.calledOnce).toEqual(true);
  });

});
