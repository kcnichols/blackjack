// s2s-svg-icons/__tests__/index-js

//'use strict';
import React from 'react';
import { shallow, mount, render } from 'enzyme';
import sinon from 'sinon';

jest.unmock('../src/index.jsx');
jest.unmock('../node_modules/s2s-base-class');
jest.unmock('../node_modules/sinon');
// jest.unmock('../node_modules/immutable');
// jest.unmock('../node_modules/sinon');
import ReactDOM from 'react-dom';
import {CheckboxIconSVG, CloseIconSVG, Star2StarFullLogoSVG, AddBorderIconSVG, AlertIconSVG} from '../src/index.jsx';

//This component differs from every other svg component because this one does not actually contain a unique set of svgs.
//This component simply makes a 'library' of the 5 other svg components.
describe('s2s-svg-icons tests', ()=>{

  it('renders CheckboxIconSVG', () => {
    const wrapper = mount(<div><CheckboxIconSVG title='test' description='this is for testing' /></div>);
    expect(wrapper.find('path').length + wrapper.find('title').length + wrapper.find('desc').length ).toEqual(3);
  });

  it('renders CloseIconSVG', () => {
    const wrapper = mount(<div><CloseIconSVG title='test' description='this is for testing' /></div>);
    expect(wrapper.find('path').length + wrapper.find('title').length + wrapper.find('desc').length ).toEqual(3);
  });

  it('renders Star2StarFullLogoSVG', () => {
    const wrapper = mount(<div><Star2StarFullLogoSVG title='test' description='this is for testing' /></div>);
    expect(wrapper.find('path').length + wrapper.find('title').length + wrapper.find('desc').length ).toEqual(8);
  });

  it('renders AlertIconSVG', () => {
    const wrapper = mount(<div><AlertIconSVG title='test' description='this is for testing' /></div>);
    expect(wrapper.find('path').length + wrapper.find('title').length + wrapper.find('desc').length ).toEqual(3);
  });

  it('renders AddBorderIconSVG', () => {
    const wrapper = mount(<div><AddBorderIconSVG title='test' description='this is for testing' /></div>);
    expect(wrapper.find('path').length + wrapper.find('title').length + wrapper.find('desc').length ).toEqual(4);
  });


});
